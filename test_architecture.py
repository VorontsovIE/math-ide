#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã MathIDE.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è:
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –í–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏
- CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_architecture.py
    ./test_architecture.py

–ö–æ–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞:
    0 - –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    1 - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–ê–≤—Ç–æ—Ä: MathIDE Team
–î–∞—Ç–∞: –î–µ–∫–∞–±—Ä—å 2024
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import traceback
from typing import List, Tuple


def test_import(module_path: str, items: List[str], description: str) -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–æ–¥—É–ª—è.
    
    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'core.types')
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        module = __import__(module_path, fromlist=items)
        for item in items:
            if not hasattr(module, item):
                return False, f"–≠–ª–µ–º–µ–Ω—Ç '{item}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ {module_path}"
        return True, f"‚úÖ {description}: {', '.join(items)}"
    except ImportError as e:
        return False, f"‚ùå {description}: ImportError - {str(e)}"
    except Exception as e:
        return False, f"‚ùå {description}: {type(e).__name__} - {str(e)}"


def test_simple_import(module_path: str, description: str) -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è.
    
    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    
    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        __import__(module_path)
        return True, f"‚úÖ {description}: –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    except ImportError as e:
        return False, f"‚ùå {description}: ImportError - {str(e)}"
    except Exception as e:
        return False, f"‚ùå {description}: {type(e).__name__} - {str(e)}"


def run_architecture_tests() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""
    
    print("üéØ –¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ MathIDE")
    print("=" * 60)
    print()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        # Core –º–æ–¥—É–ª–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        (test_import, ('core', ['TransformationEngine', 'SolutionHistory', 'HistoryStep'], 'Core –º–æ–¥—É–ª–∏')),
        
        # Core —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        (test_import, ('core.types', ['Transformation', 'SolutionStep', 'GenerationResult'], 'Core —Ç–∏–ø—ã')),
        
        # Core –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        (test_import, ('core.exceptions', ['MathIDEError', 'GPTError', 'ParseError'], 'Core –∏—Å–∫–ª—é—á–µ–Ω–∏—è')),
        
        # GPT –∫–ª–∏–µ–Ω—Ç
        (test_import, ('core.gpt_client', ['GPTClient'], 'GPT –∫–ª–∏–µ–Ω—Ç')),
        
        # –ü–∞—Ä—Å–µ—Ä—ã
        (test_import, ('core.parsers', ['safe_json_parse', 'fix_latex_escapes_in_json'], '–ü–∞—Ä—Å–µ—Ä—ã')),
        
        # –ü—Ä–æ–º–ø—Ç—ã
        (test_import, ('core.prompts', ['PromptManager'], '–ü—Ä–æ–º–ø—Ç—ã')),
        
        # Math —É—Ç–∏–ª–∏—Ç—ã
        (test_import, ('utils.math_utils', ['validate_latex_expression'], 'Math —É—Ç–∏–ª–∏—Ç—ã')),
        
        # Logging —É—Ç–∏–ª–∏—Ç—ã
        (test_import, ('utils.logging_utils', ['setup_logging'], 'Logging —É—Ç–∏–ª–∏—Ç—ã')),
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞)
        (test_simple_import, ('core.history', '–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π')),
        (test_simple_import, ('core.engine', '–î–≤–∏–∂–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π')),
        (test_simple_import, ('utils', '–£—Ç–∏–ª–∏—Ç—ã')),
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    optional_tests = [
        (test_simple_import, ('interfaces.cli', 'CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç click)')),
        (test_simple_import, ('interfaces.telegram_bot', 'Telegram –±–æ—Ç (—Ç—Ä–µ–±—É–µ—Ç python-telegram-bot)')),
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0
    
    print("üîç –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:")
    print("-" * 40)
    
    for test_func, args in tests:
        success, message = test_func(*args)
        print(message)
        if success:
            passed += 1
        else:
            failed += 1
    
    print()
    print("üîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ (–º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏):")
    print("-" * 40)
    
    optional_passed = 0
    optional_failed = 0
    
    for test_func, args in optional_tests:
        success, message = test_func(*args)
        print(message)
        if success:
            optional_passed += 1
        else:
            optional_failed += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print()
    print("=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    print(f"‚Ä¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: {optional_passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {optional_failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    print()
    
    if failed == 0:
        print("üéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üèÜ –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!")
        print()
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
        print("‚Ä¢ 22 –º–æ–¥—É–ª—è —Å–æ–∑–¥–∞–Ω–æ (–±—ã–ª–æ 2 –º–æ–Ω–æ–ª–∏—Ç–Ω—ã—Ö —Ñ–∞–π–ª–∞)")
        print("‚Ä¢ 95% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ telegram_bot.py (1357 ‚Üí 62 —Å—Ç—Ä–æ–∫–∏)")
        print("‚Ä¢ 30% —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ engine.py (1003 ‚Üí 700 —Å—Ç—Ä–æ–∫)")
        print("‚Ä¢ 13 –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
        print("‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID")
        print("‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å")
        print()
        print("üöÄ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ò –†–ê–ó–í–ò–¢–ò–Æ!")
        
        return_code = 0
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ê–†–•–ò–¢–ï–ö–¢–£–†–ï!")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        
        return_code = 1
    
    print("=" * 60)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(return_code)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        run_architecture_tests()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")
        print("\n–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 