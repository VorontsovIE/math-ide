#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (system/user).
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.prompts import PromptManager
from core.gpt_client import GPTClient

def test_split_prompts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
    pm = PromptManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:")
    
    try:
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:")
        system_prompt, user_prompt = pm.load_split_prompt("generation")
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatted_system, formatted_user = pm.format_split_prompt(
            system_prompt,
            user_prompt,
            current_state="2x + 4 = 10"
        )
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω ({len(formatted_system)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω ({len(formatted_user)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –≤–µ—Ç–≤–ª–µ–Ω–∏—è
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ç–≤–ª–µ–Ω–∏—è:")
        system_prompt, user_prompt = pm.load_split_prompt("branching")
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è:")
        system_prompt, user_prompt = pm.load_split_prompt("check")
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        system_prompt, user_prompt = pm.load_split_prompt("verification")
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
        system_prompt, user_prompt = pm.load_split_prompt("progress_analysis")
        print(f"‚úÖ System –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ User –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True

def test_gpt_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GPT (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á)."""
    
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("\n‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return True
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        pm = PromptManager()
        gpt_client = GPTClient(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        system_prompt, user_prompt = pm.load_split_prompt("generation")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
        formatted_system, formatted_user = pm.format_split_prompt(
            system_prompt,
            user_prompt,
            current_state="x + 2 = 5"
        )
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = gpt_client.chat_completion(
            messages=[
                {"role": "system", "content": formatted_system},
                {"role": "user", "content": formatted_user},
            ],
            temperature=0.3,
        )
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT ({len(response.content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage.total_tokens}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON
        if "[" in response.content and "]" in response.content:
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-–º–∞—Å—Å–∏–≤")
        else:
            print("‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON-–º–∞—Å—Å–∏–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    success = True
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    success &= test_split_prompts()
    
    # –¢–µ—Å—Ç GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    success &= test_gpt_integration()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1) 