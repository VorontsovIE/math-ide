"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
"""

import logging
import base64
import json
from typing import Any, Dict, List, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)





def get_transformations_keyboard(
    transformation_ids: List[str], current_step_id: str, transformations: Optional[List[Any]] = None
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏."""
    keyboard = []

    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)
    transformation_row = []
    for i, transformation_id in enumerate(transformation_ids):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
        button = InlineKeyboardButton(
            text=str(i + 1),
            callback_data=f"transform_{transformation_id}",
        )
        transformation_row.append(button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    if transformation_row:
        keyboard.append(transformation_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    nav_row.append(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{current_step_id}")
    )
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(keyboard)


def get_transformations_description_text(transformations: List[Any], use_html: bool = True) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π."""
    if not transformations:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π"
    
    description_lines = []
    for i, transformation in enumerate(transformations):
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if isinstance(transformation, dict):
            description = transformation.get("description", f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {i+1}")
        else:
            description = getattr(transformation, "description", f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {i+1}")
        
        if use_html:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∂–∏—Ä–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            description_lines.append(f"<b>{i+1}.</b> {description}")
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            description_lines.append(f"{i+1}. {description}")
    
    return "\n".join(description_lines)


def get_verification_keyboard(
    transformation_id: str, verification_type: str, current_step_id: str
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if verification_type == "manual":
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data=f"verify_correct_{transformation_id}"
                ),
                InlineKeyboardButton(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                    callback_data=f"verify_incorrect_{transformation_id}",
                ),
            ]
        )
    elif verification_type == "auto":
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"verify_auto_{transformation_id}"
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    nav_row.append(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{current_step_id}")
    )
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(keyboard)


def get_parameter_input_keyboard(
    parameter_name: str,
    parameter_type: str,
    options: Optional[List[str]] = None,
    current_step_id: str = "",
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    keyboard = []

    if parameter_type == "choice" and options:
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        for i, option in enumerate(options):
            button = InlineKeyboardButton(
                text=option,
                callback_data=f"param_{parameter_name}_{i}_{current_step_id}",
            )
            keyboard.append([button])
    else:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                    callback_data=f"param_manual_{parameter_name}_{current_step_id}",
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    nav_row.append(
        InlineKeyboardButton(
            "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_param_{current_step_id}"
        )
    )
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(keyboard)


def get_solution_complete_keyboard(
    is_solved: bool, confidence: float, current_step_id: str
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è."""
    keyboard = []

    if is_solved:
        status_text = f"‚úÖ –†–µ—à–µ–Ω–æ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
        keyboard.append(
            [InlineKeyboardButton(status_text, callback_data="solution_complete")]
        )
    else:
        status_text = f"‚ùå –ù–µ —Ä–µ—à–µ–Ω–æ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
        keyboard.append(
            [InlineKeyboardButton(status_text, callback_data="solution_incomplete")]
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    nav_row.append(
        InlineKeyboardButton(
            "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_{current_step_id}"
        )
    )
    nav_row.append(
        InlineKeyboardButton("üìù –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data="new_solution")
    )
    keyboard.append(nav_row)

    return InlineKeyboardMarkup(keyboard)


def get_error_keyboard(
    error_type: str, current_step_id: str = ""
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    keyboard = []

    if error_type == "api_error":
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry_{current_step_id}"
                ),
                InlineKeyboardButton("üìù –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data="new_solution"),
            ]
        )
    elif error_type == "validation_error":
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"fix_{current_step_id}"
                ),
                InlineKeyboardButton(
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{current_step_id}"
                ),
            ]
        )
    else:
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry_{current_step_id}"
                ),
                InlineKeyboardButton("üìù –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data="new_solution"),
            ]
        )

    return InlineKeyboardMarkup(keyboard)


def get_user_transformation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    keyboard = [
        [
            InlineKeyboardButton(
                "üéØ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="user_transformation"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)
