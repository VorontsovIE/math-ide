"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤.
"""

import logging
from typing import TYPE_CHECKING, Union
import json
import base64

if TYPE_CHECKING:
    from telegram import Update, Message, CallbackQuery
    from telegram.ext import ContextTypes

from core.engines import TransformationGenerator
from core.history import SolutionHistory
from core.types import SolutionStep
from core.engine import TransformationEngine

from .keyboards import get_transformations_keyboard, get_transformations_description_text
from .rate_limiter import rate_limiter
from .renderers import render_transformations_results_image, render_latex_to_image, render_expression_image
from .state import UserState, user_states
from .utils import edit_status_message, send_status_message

logger = logging.getLogger(__name__)


async def start(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not update.effective_user:
        return
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    user_states[user_id] = UserState()

    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É –≤ LaTeX-—Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "2(x + 1) = 4"
        )


async def help_command(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    if not update.effective_user:
        return
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

    if update.message:
        await update.message.reply_text(
            "–Ø –ø–æ–º–æ–≥–∞—é —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."
        )


async def cancel(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    if not update.effective_user:
        return
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ")

    user_states[user_id] = UserState()

    if update.message:
        await update.message.reply_text(
            "–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
        )


async def show_history(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    if not update.effective_user:
        return
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")

    state = user_states.get(user_id)

    if not state or not state.history:
        logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if update.message:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        summary = state.history.get_full_history_summary()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è: {len(summary['steps'])} —à–∞–≥–æ–≤")

        history_text = (
            f"üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n'{state.history.original_task}'\n\n"
        )
        for i, step in enumerate(summary["steps"], 1):
            history_text += f"–®–∞–≥ {i}: {step.get('expression', 'N/A')}\n"
            if step.get("chosen_transformation"):
                history_text += (
                    f"‚û°Ô∏è {step['chosen_transformation'].get('description', 'N/A')}\n"
                )
            history_text += "\n"

        if update.message:
            await update.message.reply_text(history_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        if update.message:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è.")


async def handle_task(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    logger.info("DEBUG: handle_task called")
    try:
        if not update.effective_user or not update.message or not update.message.text:
            logger.info("DEBUG: early return, no user/message/text")
            return
        user_id = update.effective_user.id
        task = update.message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {task}")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        from .renderers import extract_math_expression
        cleaned_task = extract_math_expression(task)
        if cleaned_task != task:
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {cleaned_task}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id)
        logger.info(f"DEBUG: user state on entry: {state}")
        if state:
            if state.waiting_for_user_result and hasattr(state, 'last_chosen_transformation_id'):
                logger.info("DEBUG: entering manual result check branch")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ LLM
                transformation_id = state.last_chosen_transformation_id
                selected_transformation = state.transformation_storage.get_transformation(transformation_id)
                expr = state.current_step.expression if state.current_step else ""
                user_result = update.message.text.strip()
                from core.engine import TransformationEngine
                engine = TransformationEngine()
                verification = engine.verifier.verify_transformation(
                    expr,
                    selected_transformation.description if selected_transformation else "",
                    user_result,
                    verification_type="application_verification",
                )
                state.total_free_answers += 1
                if verification.is_correct:
                    state.correct_free_answers += 1
                    await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç –∫–∞–∫ –Ω–æ–≤—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π.")
                    state.current_step = SolutionStep(expression=user_result)
                    state.waiting_for_user_result = False
                    logger.info("DEBUG: manual result correct, moving to next step")
                    await next_step_after_result(user_id, state, update)
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
                    logger.info("DEBUG: manual result incorrect, triggering show_variants_")
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º show_variants_
                    state.waiting_for_user_result = False
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–ø–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    step_number = state.student_step_number
                    cache_key = (step_number, transformation_id)
                    if cache_key in state.result_variants_cache:
                        variants = state.result_variants_cache[cache_key]
                    else:
                        from core.engine import TransformationEngine
                        from core.gpt_client import GPTClient
                        from core.prompts import PromptManager
                        engine = TransformationEngine(GPTClient(), PromptManager())
                        variants = engine.generate_result_variants(expr, selected_transformation.description)
                        state.result_variants_cache[cache_key] = variants
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    from .renderers import render_transformations_results_image
                    latex_variants = [v["expression"] for v in variants]
                    img = render_transformations_results_image([
                        type('FakeTr', (), {"preview_result": v["expression"]}) for v in variants
                    ])
                    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                    keyboard = [[InlineKeyboardButton(str(i+1), callback_data=f"choose_variant_{transformation_id}_{i}") for i in range(len(variants))]]
                    await update.message.reply_photo(
                        photo=img,
                        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                    )
                logger.info("DEBUG: return after manual result branch")
                return
            logger.info("DEBUG: state exists but not waiting_for_user_result")
        logger.info("DEBUG: main branch, new task initialization")
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        rate_limiter.start_operation(user_id)

        # –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            expression_img = render_expression_image(cleaned_task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            await update.message.reply_photo(
                photo=expression_img,
                caption="üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ü–û–°–õ–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_message = await send_status_message(
            update, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...", force_update=True
        )

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—é
            if status_message:
                await edit_status_message(
                    status_message, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...", user_id
                )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            from core.gpt_client import GPTClient
            from core.prompts import PromptManager

            client = GPTClient()
            prompt_manager = PromptManager()
            engine = TransformationGenerator(client, prompt_manager, preview_mode=True)
            history = SolutionHistory(cleaned_task)
            current_step = SolutionStep(expression=cleaned_task)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_step_id = history.add_step(
                expression=cleaned_task, available_transformations=[]
            )
            logger.debug("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π...")
            generation_result = engine.generate_transformations(current_step)
            logger.info(
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generation_result.transformations)} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π"
            )

            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.debug("–î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            logger.debug(f"  –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(generation_result)}")
            logger.debug(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {len(generation_result.transformations)}")
            
            if generation_result.transformations:
                logger.debug("  –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:")
                for i, tr in enumerate(generation_result.transformations):
                    logger.debug(f"    {i}: {tr.description}")
            else:
                logger.warning("  –°–ø–∏—Å–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç!")

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
            if history.steps:
                history.steps[0].available_transformations = [
                    tr.__dict__ for tr in generation_result.transformations
                ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            if not generation_result.transformations:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {cleaned_task}")
                logger.error("–ü–†–ò–ß–ò–ù–ê: generation_result.transformations –ø—É—Å—Ç")
                logger.error("–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ:")
                logger.error("  1. –û—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT")
                logger.error("  2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ JSON")
                logger.error("  3. –ü—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –æ—Ç GPT")
                logger.error("  4. –û—à–∏–±–∫–æ–π –≤ LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ")
                
                if status_message:
                    await edit_status_message(
                        status_message,
                        f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n"
                        f"`{cleaned_task}`\n\n"
                        f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        f"‚Ä¢ –ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è\n"
                        f"‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
                        f"‚Ä¢ –û—à–∏–±–∫–∞ –≤ LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        f"‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
                        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
                        user_id,
                        force_update=True,
                    )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = UserState(
                history=history,
                current_step=current_step,
                available_transformations=generation_result.transformations,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            transformation_ids = user_states[user_id].transformation_storage.add_transformations(
                initial_step_id, generation_result.transformations
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            transformations_text = get_transformations_description_text(generation_result.transformations)
            
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await update.message.reply_text(
                f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n\n{transformations_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
                reply_markup=get_transformations_keyboard(transformation_ids, initial_step_id, generation_result.transformations),
                parse_mode='HTML',
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if status_message:
                await status_message.delete()
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            # async def send_transformations_image():
            #     try:
            #         # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            #         transformations_img = render_transformations_results_image(generation_result.transformations)
                    
            #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            #         await update.message.reply_photo(
            #             photo=transformations_img,
            #             caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:",
            #         )
            #     except Exception as e:
            #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏ –≤ —Ñ–æ–Ω–µ
            # import asyncio
            # asyncio.create_task(send_transformations_image())
            logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
            error_message = (
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
            )

            if status_message:
                await edit_status_message(
                    status_message, error_message, user_id, force_update=True
                )
            elif update.message and isinstance(update.message, Message):
                # –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ mypy –∏–∑-–∑–∞ MaybeInaccessibleMessage (python-telegram-bot)
                await update.message.reply_text(error_message)  # type: ignore[attr-defined]
    except Exception as e:
        logger.error(f"ERROR in handle_task: {e}", exc_info=True)


# --- –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π Telegram-–±–æ—Ç–∞ ---

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è LLM (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ init)
engine = TransformationEngine()

async def handle_transformation_choice(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)."""
    if not update.callback_query:
        return
    query = update.callback_query
    if not query.from_user:
        return
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)")
    state = user_states.get(user_id)
    if not state or not state.history:
        logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.answer("–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        return
    try:
        callback_data = query.data
        if not callback_data or not callback_data.startswith("transform_"):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        transformation_id = callback_data.split("_")[1]
        selected_transformation = state.transformation_storage.get_transformation(transformation_id)
        if not selected_transformation:
            await query.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        # --- –ù–æ–≤—ã–π —à–∞–≥ ---
        state.student_step_number += 1
        logger.info(f"student_step_number={state.student_step_number}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = (
            f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–®–∞–≥: {state.student_step_number}\n"
            f"–°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {state.correct_free_answers} –∏–∑ {state.total_free_answers}\n"
            f"–í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {state.correct_choice_answers} –∏–∑ {state.total_choice_answers}"
        )
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if state.student_step_number == 1:
            await query.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {selected_transformation.description}" + stats,
                parse_mode='HTML',
            )
            # ... (–ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            # (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∏ return)
            # ... existing code ...
            return
        # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –ø–µ—Ä–≤—ã–π ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_result_{transformation_id}"),
                InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", callback_data=f"show_variants_{transformation_id}"),
            ]
        ]
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {selected_transformation.description}" + stats +
            "\n\n–ö–∞–∫–æ–π –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ –∂–¥—ë–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state.waiting_for_user_result = True
        state.last_chosen_transformation_id = transformation_id
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–æ–≤–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def _handle_transform_choice(
    query: "CallbackQuery", callback_data: str, state: UserState
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–∑ callback
    try:
        transformation_id = callback_data.split("_")[1]
        selected_transformation = state.transformation_storage.get_transformation(transformation_id)
        
        if not selected_transformation:
            await query.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        if not selected_transformation.preview_result:
            await query.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            return

        result_expression = selected_transformation.preview_result
        
    except (IndexError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏: {e}")
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
    if not state.current_step:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        return
        
    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await query.answer("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!")
    
    # –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if query.message:
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            result_img = render_latex_to_image(result_expression)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            await query.message.reply_photo(
                photo=result_img,
                caption="üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    new_step = SolutionStep(expression=result_expression)
    state.current_step = new_step
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
    step_id = state.history.add_step(
        expression=result_expression,
        chosen_transformation=selected_transformation.__dict__,
        available_transformations=[]
    ) if state.history else "current"
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if query.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await query.message.reply_text(
            f"üîß <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            f"<i>{selected_transformation.description}</i>\n\n"
            f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"<code>{result_expression}</code>\n\n"
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...",
            parse_mode='HTML',
        )
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞...")
            from core.engines.transformation_generator import TransformationGenerator
            from core.gpt_client import GPTClient
            from core.prompts import PromptManager
            
            client = GPTClient()
            prompt_manager = PromptManager()
            engine = TransformationGenerator(client, prompt_manager, preview_mode=True)
            generation_result = engine.generate_transformations(new_step)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            new_transformation_ids = state.transformation_storage.add_transformations(
                step_id, generation_result.transformations
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
            state.available_transformations = generation_result.transformations

            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.delete()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if generation_result.transformations:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
                transformations_text = get_transformations_description_text(generation_result.transformations)
                
                # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await query.message.reply_text(
                    f"üîß <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                        f"<i>{selected_transformation.description}</i>\n\n"
                        f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                        f"<code>{result_expression}</code>\n\n"
                        f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n\n{transformations_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
                    reply_markup=get_transformations_keyboard(new_transformation_ids, step_id, generation_result.transformations),
                    parse_mode='HTML',
                )
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
                # async def send_transformations_image():
                #     try:
                #         # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
                #         transformations_img = render_transformations_results_image(generation_result.transformations)
                        
                #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
                #         await query.message.reply_photo(
                #             photo=transformations_img,
                #             caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞:",
                #         )
                #     except Exception as e:
                #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏: {e}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏ –≤ —Ñ–æ–Ω–µ
                # import asyncio
                # asyncio.create_task(send_transformations_image())
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await query.message.reply_text(
                    f"üîß <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                    f"<i>{selected_transformation.description}</i>\n\n"
                    f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                    f"<code>{result_expression}</code>\n\n"
                    f"üéâ <b>–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞!</b>\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    parse_mode='HTML',
                )
                
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                async def send_final_image():
                    try:
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                        result_img = render_latex_to_image(result_expression)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                        await query.message.reply_photo(
                            photo=result_img,
                            caption="üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
                # import asyncio
                # asyncio.create_task(send_final_image())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await processing_msg.edit_text(
                f"üîß <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                f"<i>{selected_transformation.description}</i>\n\n"
                f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                f"<code>{result_expression}</code>\n\n"
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π</b>\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.",
                parse_mode='HTML',
            )


async def _handle_back_button(
    query: "CallbackQuery", callback_data: str, state: UserState
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    await query.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É")
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query.message:
        await query.message.reply_text(
            "üîß –§—É–Ω–∫—Ü–∏—è '–ù–∞–∑–∞–¥' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )


async def _handle_refresh_button(
    query: "CallbackQuery", callback_data: str, state: UserState
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å'."""
    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await query.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π...")
    
    if not state.current_step:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
        return
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—è–∂–µ–ª—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if query.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await query.message.reply_text(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è:\n"
            f"<code>{state.current_step.expression}</code>",
            parse_mode='HTML',
        )
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            from core.engines.transformation_generator import TransformationGenerator
            from core.gpt_client import GPTClient
            from core.prompts import PromptManager
            
            client = GPTClient()
            prompt_manager = PromptManager()
            engine = TransformationGenerator(client, prompt_manager, preview_mode=True)
            
            generation_result = engine.generate_transformations(state.current_step)
            state.available_transformations = generation_result.transformations
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.delete()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            refresh_transformation_ids = state.transformation_storage.add_transformations(
                state.history.get_current_step().id if state.history and state.history.get_current_step() else "current",
                generation_result.transformations
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            transformations_text = get_transformations_description_text(generation_result.transformations)
            
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.reply_text(
                f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è:</b>\n\n{transformations_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
                reply_markup=get_transformations_keyboard(
                    refresh_transformation_ids,
                    state.history.get_current_step().id if state.history and state.history.get_current_step() else "current",
                    generation_result.transformations,
                ),
                parse_mode='HTML',
            )
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            # async def send_image():
            #     try:
            #         # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            #         transformations_img = render_transformations_results_image(generation_result.transformations)
                        
            #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            #         await query.message.reply_photo(
            #             photo=transformations_img,
            #             caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π:",
            #         )
            #     except Exception as e:
            #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
            # import asyncio
            # asyncio.create_task(send_image())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π</b>\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.",
                parse_mode='HTML',
            )


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
async def handle_custom_transformation(
    update: "Update", user_id: int, custom_description: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    if update.message:
        await update.message.reply_text(
            "üîß handle_custom_transformation –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py"
        )


async def handle_user_suggestion(
    update: "Update", user_id: int, user_suggestion: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.message:
        await update.message.reply_text(
            "üîß handle_user_suggestion –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py"
        )


async def handle_user_transformation_result(
    update: "Update", user_id: int, user_input: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    if update.message:
        await update.message.reply_text(
            "üîß handle_user_transformation_result –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py"
        )


async def show_final_history(
    update_or_query: Union["Update", "Message"], history: SolutionHistory
) -> None:
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è."""
    try:
        if hasattr(update_or_query, "message") and update_or_query.message:
            await update_or_query.message.reply_text(
                "üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"
            )
        elif hasattr(update_or_query, "reply_text"):
            await update_or_query.reply_text("üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        else:
            logger.warning("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–ª—è show_final_history")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_final_history: {e}")


# --- –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π Telegram-–±–æ—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ) ---

async def handle_callback_query(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö callback'–æ–≤: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    if not update.callback_query:
        return
    query = update.callback_query
    user_id = query.from_user.id
    state = user_states.get(user_id)
    if not state:
        await query.answer("–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    data = query.data or ""
    logger.info(f"Callback: {data}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (transform_)
    if data.startswith("transform_"):
        logger.info(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ transform_ callback: {data}")
        transformation_id = data.split("_")[1]
        selected_transformation = state.transformation_storage.get_transformation(transformation_id)
        
        if not selected_transformation:
            await query.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        state.student_step_number += 1
        state.last_chosen_transformation_id = transformation_id
        
        await query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {selected_transformation.description}")
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        if state.student_step_number == 2:  # –ü–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 2
            logger.info(f"DEBUG: –ü–µ—Ä–≤—ã–π —à–∞–≥ (student_step_number=2), —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            result_expression = selected_transformation.preview_result
            new_step = SolutionStep(expression=result_expression)
            state.current_step = new_step
            await next_step_after_result(user_id, state, query)
        else:
            logger.info(f"DEBUG: –ù–µ –ø–µ—Ä–≤—ã–π —à–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" / "–ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã"
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é", callback_data=f"manual_result_{transformation_id}"),
                    InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", callback_data=f"show_variants_{transformation_id}"),
                ]
            ]
            stats = (
                f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"–®–∞–≥: {state.student_step_number}\n"
                f"–°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {state.correct_free_answers} –∏–∑ {state.total_free_answers}\n"
                f"–í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {state.correct_choice_answers} –∏–∑ {state.total_choice_answers}"
            )
            await query.message.reply_text(
                f"üîß <b>–í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n<i>{selected_transformation.description}</i>\n\n–ö–∞–∫–æ–π –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?" + stats,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML',
            )
        return
    
    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if data.startswith("manual_result_"):
        transformation_id = data.split("_")[2]
        state.waiting_for_user_result = True
        state.last_chosen_transformation_id = transformation_id
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ LaTeX-—Ñ–æ—Ä–º–∞—Ç–µ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):"
        )
        await query.answer()
        return
    # –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    if data.startswith("show_variants_"):
        transformation_id = data.split("_")[2]
        step_number = state.student_step_number
        cache_key = (step_number, transformation_id)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
        if cache_key in state.result_variants_cache:
            variants = state.result_variants_cache[cache_key]
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {cache_key}")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —á–µ—Ä–µ–∑ LLM
            selected_transformation = state.transformation_storage.get_transformation(transformation_id)
            if not selected_transformation:
                await query.answer("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            expr = state.current_step.expression if state.current_step else ""
            from core.engine import TransformationEngine
            from core.gpt_client import GPTClient
            from core.prompts import PromptManager
            engine = TransformationEngine(GPTClient(), PromptManager())
            variants = engine.generate_result_variants(expr, selected_transformation.description)
            state.result_variants_cache[cache_key] = variants
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ LLM")
        # –†–µ–Ω–¥–µ—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (–Ω–æ–º–µ—Ä–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö, LaTeX ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)
        from .renderers import render_transformations_results_image
        from io import BytesIO
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        latex_variants = [v["expression"] for v in variants]
        # –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        img = render_transformations_results_image([
            type('FakeTr', (), {"preview_result": v["expression"]}) for v in variants
        ])
        # –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞
        keyboard = [[InlineKeyboardButton(str(i+1), callback_data=f"choose_variant_{transformation_id}_{i}") for i in range(len(variants))]]
        await query.message.reply_photo(
            photo=img,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        state.waiting_for_user_result = False
        state.waiting_for_choice = (transformation_id, step_number)
        await query.answer()
        return
    # –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if data.startswith("choose_variant_"):
        _, transformation_id, idx = data.split("_")
        idx = int(idx)
        step_number = state.student_step_number
        cache_key = (step_number, transformation_id)
        variants = state.result_variants_cache.get(cache_key, [])
        if not variants or idx >= len(variants):
            await query.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        chosen = variants[idx]
        state.total_choice_answers += 1
        if chosen.get("correctness"):
            state.correct_choice_answers += 1
            msg = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: "
            for i, v in enumerate(variants):
                if v.get("correctness"):
                    msg += f"\n{str(i+1)}: {v['expression']}"
                    break
        await query.message.reply_text(msg)
        await next_step_after_result(user_id, state, query)
        await query.answer()
        return

async def next_step_after_result(user_id: int, state: UserState, update_or_query):
    from core.engines import TransformationGenerator
    from core.gpt_client import GPTClient
    from core.prompts import PromptManager
    client = GPTClient()
    prompt_manager = PromptManager()
    engine = TransformationGenerator(client, prompt_manager, preview_mode=True)
    current_step = state.current_step
    if not current_step:
        logger.error("–ù–µ—Ç current_step –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
        return
    generation_result = engine.generate_transformations(current_step)
    state.available_transformations = generation_result.transformations
    step_id = state.history.add_step(
        expression=current_step.expression,
        available_transformations=[tr.__dict__ for tr in generation_result.transformations]
    ) if state.history else "current"
    transformation_ids = state.transformation_storage.add_transformations(
        step_id, generation_result.transformations
    )
    transformations_text = get_transformations_description_text(generation_result.transformations)
    stats = (
        f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–®–∞–≥: {state.student_step_number}\n"
        f"–°–≤–æ–±–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {state.correct_free_answers} –∏–∑ {state.total_free_answers}\n"
        f"–í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {state.correct_choice_answers} –∏–∑ {state.total_choice_answers}"
    )
    # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    # –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º transform_ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    reply_markup = get_transformations_keyboard(transformation_ids, step_id, generation_result.transformations)
    text = f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n\n{transformations_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:" + stats
    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
    if hasattr(update_or_query, "message") and update_or_query.message:
        await update_or_query.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML',
        )
    elif hasattr(update_or_query, "reply_text"):
        await update_or_query.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='HTML',
        )
    # --- –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π! ---
