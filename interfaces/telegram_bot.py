import io
import logging
import time
from typing import Dict, Optional, List
import asyncio
from dataclasses import dataclass, field

import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from core.engine import TransformationEngine, SolutionStep, Transformation
from core.history import SolutionHistory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
try:
    import coloredlogs
    coloredlogs.install(
        level='INFO',
        logger=logger,
        fmt="%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s"
    )
except ImportError:
    logger.info("coloredlogs –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
MIN_STATUS_UPDATE_INTERVAL = 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MAX_STATUS_UPDATES_PER_MINUTE = 20  # –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –≤ –º–∏–Ω—É—Ç—É
PROGRESS_UPDATE_INTERVAL = 3.0  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

@dataclass
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ."""
    history: Optional[SolutionHistory] = None
    current_step: Optional[SolutionStep] = None
    available_transformations: List[Transformation] = field(default_factory=list)
    last_status_update: float = 0.0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_update_count: int = 0  # –°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–µ
    status_reset_time: float = 0.0  # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    current_operation_start: float = 0.0  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, UserState] = {}

class RateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ API."""
    
    def __init__(self):
        self.global_last_update = 0.0
        self.global_update_count = 0
        self.global_reset_time = time.time()
    
    def can_update_status(self, user_id: int, force_update: bool = False) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id)
        if not state:
            return True
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        if force_update:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if current_time - state.last_status_update < MIN_STATUS_UPDATE_INTERVAL:
            logger.debug(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
        if current_time - state.status_reset_time >= 60:
            state.status_update_count = 0
            state.status_reset_time = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        if state.status_update_count >= MAX_STATUS_UPDATES_PER_MINUTE:
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        return True
    
    def should_show_progress(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        current_time = time.time()
        state = user_states.get(user_id)
        
        if not state:
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥
        return current_time - state.current_operation_start >= PROGRESS_UPDATE_INTERVAL
    
    def record_status_update(self, user_id: int) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞."""
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        if current_time - self.global_reset_time >= 60:
            self.global_update_count = 0
            self.global_reset_time = current_time
        
        self.global_update_count += 1
        self.global_last_update = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id)
        if state:
            state.last_status_update = current_time
            state.status_update_count += 1
    
    def start_operation(self, user_id: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        current_time = time.time()
        state = user_states.get(user_id)
        if state:
            state.current_operation_start = current_time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = RateLimiter()

def get_progress_indicator(operation_time: float) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    if operation_time < 5:
        return "üîÑ"
    elif operation_time < 10:
        return "‚è≥"
    elif operation_time < 15:
        return "‚è∞"
    else:
        return "üêå"

async def send_status_message(update: Update, message: str, force_update: bool = False) -> Optional[Message]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤."""
    user_id = update.effective_user.id
    
    if not rate_limiter.can_update_status(user_id, force_update):
        logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤")
        return None
    
    try:
        result = await update.message.reply_text(message)
        rate_limiter.record_status_update(user_id)
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return None

async def edit_status_message(message: Message, new_text: str, user_id: int, force_update: bool = False) -> bool:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤."""
    if not rate_limiter.can_update_status(user_id, force_update):
        logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–æ–≤")
        return False
    
    try:
        await message.edit_text(new_text)
        rate_limiter.record_status_update(user_id)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def update_status_with_progress(message: Message, base_text: str, user_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    if not rate_limiter.should_show_progress(user_id):
        return False
    
    current_time = time.time()
    state = user_states.get(user_id)
    if not state:
        return False
    
    operation_time = current_time - state.current_operation_start
    progress_indicator = get_progress_indicator(operation_time)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if operation_time > 5:
        progress_text = f"{base_text}\n\n‚è±Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–∂–µ {int(operation_time)} —Å–µ–∫..."
    else:
        progress_text = base_text
    
    return await edit_status_message(message, progress_text, user_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = UserState()
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É –≤ LaTeX-—Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "2(x + 1) = 4"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥–∞—é —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    user_states[user_id] = UserState()
    
    await update.message.reply_text(
        "–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
    )

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
    
    state = user_states.get(user_id)
    
    if not state or not state.history:
        logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏
        summary = state.history.get_full_history_summary()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è: {len(summary['steps'])} —à–∞–≥–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for step_data in state.history.get_all_steps():
            # –†–µ–Ω–¥–µ—Ä–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            img = render_latex_to_image(step_data.expression)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞
            description = f"–®–∞–≥ {step_data.step_number}: {step_data.expression}"
            if step_data.chosen_transformation:
                description += f"\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {step_data.chosen_transformation.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')}"
            if step_data.result_expression:
                description += f"\n‚û°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: {step_data.result_expression}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π —ç—Ç–æ–≥–æ —à–∞–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            keyboard = None
            if step_data.available_transformations:
                transformations = [Transformation(**tr) for tr in step_data.available_transformations]
                if transformations:
                    keyboard = get_transformations_keyboard(transformations, step_data.id)
            
            await update.message.reply_photo(
                photo=img,
                caption=description,
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è.")

def fix_latex_expression(latex_expr: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ LaTeX-–≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö."""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    latex_expr = ' '.join(latex_expr.split())
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ \frac
    latex_expr = latex_expr.replace('\\rac{', '\\frac{')
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    latex_expr = latex_expr.replace('\\sin{', '\\sin(').replace('\\cos{', '\\cos(').replace('\\tan{', '\\tan(')
    
    return latex_expr

def render_latex_to_image(latex_expression: str) -> io.BytesIO:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç LaTeX-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å LaTeX
        cleaned_expression = fix_latex_expression(latex_expression)
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É matplotlib
        fig, ax = plt.subplots(figsize=(10, 2))
        ax.text(0.5, 0.5, f"${cleaned_expression}$", 
                horizontalalignment='center', verticalalignment='center',
                fontsize=16, transform=ax.transAxes)
        ax.axis('off')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', bbox_inches='tight', dpi=150)
        img_buffer.seek(0)
        plt.close(fig)
        
        return img_buffer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ LaTeX: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fig, ax = plt.subplots(figsize=(10, 2))
        ax.text(0.5, 0.5, latex_expression, 
                horizontalalignment='center', verticalalignment='center',
                fontsize=14, transform=ax.transAxes)
        ax.axis('off')
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', bbox_inches='tight', dpi=150)
        img_buffer.seek(0)
        plt.close(fig)
        
        return img_buffer

def render_transformations_image(current_expression: str, transformations: List[Transformation]) -> io.BytesIO:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏."""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        num_transformations = len(transformations)
        fig_height = 2 + num_transformations * 0.8  # –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ + –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        
        fig, ax = plt.subplots(figsize=(12, fig_height))
        ax.axis('off')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º LaTeX –≤ —Ç–µ–∫—É—â–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
        cleaned_current = fix_latex_expression(current_expression)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É
        ax.text(0.5, 0.95, "–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:", 
                horizontalalignment='center', verticalalignment='top',
                fontsize=14, fontweight='bold', transform=ax.transAxes)
        
        ax.text(0.5, 0.88, f"${cleaned_current}$", 
                horizontalalignment='center', verticalalignment='top',
                fontsize=16, transform=ax.transAxes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        ax.axhline(y=0.82, xmin=0.1, xmax=0.9, color='gray', linestyle='-', alpha=0.5, transform=ax.transAxes)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        ax.text(0.5, 0.78, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", 
                horizontalalignment='center', verticalalignment='top',
                fontsize=14, fontweight='bold', transform=ax.transAxes)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        start_y = 0.72
        for idx, tr in enumerate(transformations):
            y_pos = start_y - idx * 0.12
            
            # –ù–æ–º–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            ax.text(0.05, y_pos, f"{idx + 1}.", 
                    horizontalalignment='left', verticalalignment='center',
                    fontsize=12, fontweight='bold', transform=ax.transAxes)
            
            ax.text(0.1, y_pos, tr.description, 
                    horizontalalignment='left', verticalalignment='center',
                    fontsize=12, transform=ax.transAxes)
            
            # –°—Ç—Ä–µ–ª–∫–∞
            ax.text(0.75, y_pos, "‚Üí", 
                    horizontalalignment='center', verticalalignment='center',
                    fontsize=14, fontweight='bold', transform=ax.transAxes)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if tr.preview_result:
                cleaned_preview = fix_latex_expression(tr.preview_result)
                try:
                    ax.text(0.8, y_pos, f"${cleaned_preview}$", 
                            horizontalalignment='left', verticalalignment='center',
                            fontsize=11, transform=ax.transAxes)
                except:
                    # –ï—Å–ª–∏ LaTeX –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    ax.text(0.8, y_pos, cleaned_preview, 
                            horizontalalignment='left', verticalalignment='center',
                            fontsize=11, transform=ax.transAxes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', bbox_inches='tight', dpi=150, facecolor='white')
        img_buffer.seek(0)
        plt.close(fig)
        
        return img_buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.text(0.5, 0.5, f"–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:\n{current_expression}\n\n–î–æ—Å—Ç—É–ø–Ω–æ {len(transformations)} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π", 
                horizontalalignment='center', verticalalignment='center',
                fontsize=12, transform=ax.transAxes)
        ax.axis('off')
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', bbox_inches='tight', dpi=150, facecolor='white')
        img_buffer.seek(0)
        plt.close(fig)
        
        return img_buffer

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤."""
    user_id = update.effective_user.id
    task = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {task}")
    
    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    rate_limiter.start_operation(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_message = await send_status_message(update, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...", force_update=True)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—é
        if status_message:
            await edit_status_message(status_message, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...", user_id)
        
        engine = TransformationEngine(preview_mode=True)
        history = SolutionHistory(task)
        current_step = SolutionStep(expression=task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_step_id = history.add_step(
            expression=task,
            available_transformations=[]
        )
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π...")
        generation_result = engine.generate_transformations(current_step)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generation_result.transformations)} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
        if history.steps:
            history.steps[0].available_transformations = [tr.__dict__ for tr in generation_result.transformations]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if not generation_result.transformations:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
            if status_message:
                await edit_status_message(status_message, 
                    f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n"
                    f"`{task}`\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è\n"
                    f"‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
                    f"‚Ä¢ –û—à–∏–±–∫–∞ –≤ LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", user_id, force_update=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = UserState(
            history=history,
            current_step=current_step,
            available_transformations=generation_result.transformations
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if status_message:
            await edit_status_message(status_message, "üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é...", user_id)
        
        img = render_transformations_image(task, generation_result.transformations)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if status_message:
            await status_message.delete()
        
        await update.message.reply_photo(
            photo=img,
            caption="–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
            reply_markup=get_transformations_keyboard(generation_result.transformations, initial_step_id)
        )
        logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )
        
        if status_message:
            await edit_status_message(status_message, error_message, user_id, force_update=True)
        else:
            await update.message.reply_text(error_message)

def get_transformations_keyboard(transformations: List[Transformation], step_id: Optional[str] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏."""
    keyboard = []
    for idx, tr in enumerate(transformations):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        button_text = f"{idx + 1}. {tr.description}"
        
        # –í–∫–ª—é—á–∞–µ–º step_id –≤ callback_data –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        callback_data = f"transform_{idx}"
        if step_id:
            callback_data = f"transform_{idx}_{step_id}"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text,
                callback_data=callback_data
            )
        ])
    return InlineKeyboardMarkup(keyboard)

async def handle_transformation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É."""
    query = update.callback_query
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    
    state = user_states.get(user_id)
    
    if not state or not state.history:
        logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.answer("–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: transform_idx –∏–ª–∏ transform_idx_step_id
        callback_parts = query.data.split("_")
        idx = int(callback_parts[1])
        target_step_id = callback_parts[2] if len(callback_parts) > 2 else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —à–∞–≥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if target_step_id:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            target_step_data = state.history.get_step_by_id(target_step_id)
            if not target_step_data:
                await query.answer("‚ùå –û—à–∏–±–∫–∞: —à–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                return
            target_step = SolutionStep(expression=target_step_data.expression)
            target_expression = target_step_data.expression
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
            transformations = [Transformation(**tr) for tr in target_step_data.available_transformations]
            is_historical_step = True
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            if not state.current_step or not state.available_transformations:
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞")
                return
            target_step = state.current_step
            target_expression = state.current_step.expression
            transformations = state.available_transformations
            is_historical_step = False
        
        if idx >= len(transformations):
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
            return
            
        chosen = transformations[idx]
        logger.info(f"–í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {chosen.description} –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {target_expression}")
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        rate_limiter.start_operation(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if is_historical_step:
            await query.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É —à–∞–≥—É...")
        else:
            await query.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        engine = TransformationEngine(preview_mode=True)
        logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
        apply_result = engine.apply_transformation(target_step, chosen)
        
        if apply_result.is_valid:
            logger.info("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if is_historical_step:
                caption = (f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {chosen.description}\n"
                          f"üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –≤—ã—Ä–∞–∂–µ–Ω–∏—é: `{target_expression}`\n\n"
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            else:
                caption = f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {chosen.description}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if state.history:
                new_step_id = state.history.add_step(
                    expression=target_expression,
                    available_transformations=[tr.__dict__ for tr in transformations],
                    chosen_transformation=chosen.__dict__,
                    result_expression=apply_result.result
                )
            
            # –ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è–ª–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É, –æ–±–Ω–æ–≤–ª—è–µ–º current_step
            if not is_historical_step:
                state.current_step = SolutionStep(expression=apply_result.result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å
            await query.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è...")
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è...")
            original_task = state.history.original_task if state.history else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
            result_step = SolutionStep(expression=apply_result.result)
            check_result = engine.check_solution_completeness(
                result_step,
                original_task
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if check_result.is_solved:
                logger.info("–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞!")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
                if state.history:
                    state.history.add_step(
                        expression=apply_result.result,
                        available_transformations=[],
                        chosen_transformation=None,
                        result_expression=apply_result.result
                    )
                
                img = render_latex_to_image(apply_result.result)
                await query.message.reply_photo(
                    photo=img,
                    caption=f"{caption}\n\n‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞!\n{check_result.explanation}"
                )
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await query.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—é –Ω–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
                logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π...")
                generation_result = engine.generate_transformations(result_step)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                if not generation_result.transformations:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {apply_result.result}")
                    img = render_latex_to_image(apply_result.result)
                    await query.message.reply_photo(
                        photo=img,
                        caption=(f"{caption}\n\n"
                               f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n\n"
                               f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                               f"‚Ä¢ –ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ –±–ª–∏–∑–∫–∞ –∫ —Ä–µ—à–µ–Ω–∏—é\n"
                               f"‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
                               f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é\n\n"
                               f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                               f"‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
                               f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                    )
                    return
                
                # –ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –∫ –Ω–µ-—Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É, –æ–±–Ω–æ–≤–ª—è–µ–º available_transformations —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞–ª–æ –Ω–æ–≤—ã–º —Ç–µ–∫—É—â–∏–º —à–∞–≥–æ–º
                if not is_historical_step:
                    state.available_transformations = generation_result.transformations
                
                # –ü–æ–ª—É—á–∞–µ–º step_id –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
                new_step_id = None
                if state.history and state.history.steps:
                    new_step_id = state.history.steps[-1].id
                
                img = render_transformations_image(apply_result.result, generation_result.transformations)
                await query.message.reply_photo(
                    photo=img,
                    caption=f"{caption}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
                    reply_markup=get_transformations_keyboard(generation_result.transformations, new_step_id)
                )
                
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generation_result.transformations)} –Ω–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {apply_result.explanation}")
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {apply_result.explanation}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    
    await query.answer()

def run_bot(token: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CommandHandler("history", show_history))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
        application.add_handler(CallbackQueryHandler(handle_transformation_choice))
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    run_bot(token)