"""
–ú–æ–¥—É–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
"""

from typing import List, Optional, Dict, Any, TYPE_CHECKING

if TYPE_CHECKING:
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from core.types import Transformation


def get_transformations_keyboard(transformations: "List[Transformation]", step_id: Optional[str] = None) -> "InlineKeyboardMarkup":
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = []
    for idx, tr in enumerate(transformations):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        button_text = f"{idx + 1}. {tr.description}"
        
        # –í–∫–ª—é—á–∞–µ–º step_id –≤ callback_data –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        callback_data = f"transform_{idx}"
        if step_id:
            callback_data = f"transform_{idx}_{step_id}"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text,
                callback_data=callback_data
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    custom_callback_data = f"custom_transform"
    if step_id:
        custom_callback_data = f"custom_transform_{step_id}"
    
    keyboard.append([
        InlineKeyboardButton(
            "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            callback_data=custom_callback_data
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    user_done_callback_data = f"user_done_transform"
    if step_id:
        user_done_callback_data = f"user_done_transform_{step_id}"
    
    keyboard.append([
        InlineKeyboardButton(
            "üéØ –Ø —Å–∞–º –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            callback_data=user_done_callback_data
        )
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_verification_keyboard(verification_context: Dict[str, Any]) -> "InlineKeyboardMarkup":
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å (–µ—Å—Ç—å –æ—à–∏–±–∫–∞)", callback_data="verify_recalculate")],
        [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="verify_suggest")],
        [InlineKeyboardButton("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π", callback_data="verify_accept")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_user_transformation_keyboard() -> "InlineKeyboardMarkup":
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üéØ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="user_transformation")]
    ]
    return InlineKeyboardMarkup(keyboard) 