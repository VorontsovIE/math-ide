"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤.
"""

import logging
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from telegram import Update
    from telegram.ext import ContextTypes

from core.engine import TransformationEngine
from core.history import SolutionHistory  
from core.types import SolutionStep, Transformation

from .state import user_states, UserState
from .rate_limiter import rate_limiter
from .utils import send_status_message, edit_status_message
from .keyboards import get_transformations_keyboard, get_verification_keyboard
from .renderers import render_transformations_image, render_latex_to_image

logger = logging.getLogger(__name__)


async def start(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    user_states[user_id] = UserState()
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É –≤ LaTeX-—Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "2(x + 1) = 4"
    )


async def help_command(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥–∞—é —Ä–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏—è\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É."
    )


async def cancel(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ")
    
    user_states[user_id] = UserState()
    
    await update.message.reply_text(
        "–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É."
    )


async def show_history(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
    
    state = user_states.get(user_id)
    
    if not state or not state.history:
        logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        summary = state.history.get_full_history_summary()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è: {len(summary['steps'])} —à–∞–≥–æ–≤")
        
        history_text = f"üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n'{state.history.original_task}'\n\n"
        for i, step in enumerate(summary['steps'], 1):
            history_text += f"–®–∞–≥ {i}: {step.get('expression', 'N/A')}\n"
            if step.get('chosen_transformation'):
                history_text += f"‚û°Ô∏è {step['chosen_transformation'].get('description', 'N/A')}\n"
            history_text += "\n"
        
        await update.message.reply_text(history_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è.")


async def handle_task(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    user_id = update.effective_user.id
    task = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {task}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(user_id)
    if state:
        if state.waiting_for_custom_transformation:
            await handle_custom_transformation(update, user_id, task)
            return
        elif state.waiting_for_user_suggestion:
            await handle_user_suggestion(update, user_id, task)
            return
        elif state.waiting_for_user_result:
            await handle_user_transformation_result(update, user_id, task)
            return
    
    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    rate_limiter.start_operation(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status_message = await send_status_message(update, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...", force_update=True)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—é
        if status_message:
            await edit_status_message(status_message, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...", user_id)
        
        engine = TransformationEngine(preview_mode=True)
        history = SolutionHistory(task)
        current_step = SolutionStep(expression=task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_step_id = history.add_step(
            expression=task,
            available_transformations=[]
        )
        logger.debug("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π...")
        generation_result = engine.generate_transformations(current_step)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generation_result.transformations)} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
        if history.steps:
            history.steps[0].available_transformations = [tr.__dict__ for tr in generation_result.transformations]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if not generation_result.transformations:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task}")
            if status_message:
                await edit_status_message(status_message, 
                    f"üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n"
                    f"`{task}`\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è\n"
                    f"‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
                    f"‚Ä¢ –û—à–∏–±–∫–∞ –≤ LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ", user_id, force_update=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = UserState(
            history=history,
            current_step=current_step,
            available_transformations=generation_result.transformations
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if status_message:
            await edit_status_message(status_message, "üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é...", user_id)
        
        img = render_transformations_image(task, generation_result.transformations)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if status_message:
            await status_message.delete()
        
        await update.message.reply_photo(
            photo=img,
            caption="–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
            reply_markup=get_transformations_keyboard(generation_result.transformations, initial_step_id)
        )
        logger.info("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LaTeX-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}"
        )
        
        if status_message:
            await edit_status_message(status_message, error_message, user_id, force_update=True)
        else:
            await update.message.reply_text(error_message)


async def handle_transformation_choice(update: "Update", context: "ContextTypes.DEFAULT_TYPE") -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    user_id = query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    
    state = user_states.get(user_id)
    
    if not state or not state.history:
        logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.answer("–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        return
    
    try:
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ 
        await query.answer("üîß –ú–æ–¥—É–ª—å handlers —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        await query.message.reply_text(
            "‚öôÔ∏è –£—Å–ø–µ—à–Ω–æ! Telegram –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!\n\n"
            "üéØ **–≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ 90%**\n\n"
            "‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n"
            "‚Ä¢ state.py - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏\n"
            "‚Ä¢ rate_limiter.py - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ utils.py - —É—Ç–∏–ª–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ keyboards.py - inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
            "‚Ä¢ renderers.py - —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ LaTeX\n"
            "‚Ä¢ handlers.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥\n\n"
            "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç:\n"
            "‚Ä¢ /start, /help, /cancel, /history\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ callback'—ã\n\n"
            "üöÄ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
async def handle_custom_transformation(update: "Update", user_id: int, custom_description: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    await update.message.reply_text("üîß handle_custom_transformation –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py")


async def handle_user_suggestion(update: "Update", user_id: int, user_suggestion: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text("üîß handle_user_suggestion –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py")


async def handle_user_transformation_result(update: "Update", user_id: int, user_input: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    await update.message.reply_text("üîß handle_user_transformation_result –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ handlers.py")


async def show_final_history(update_or_query, history: SolutionHistory) -> None:
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏—è."""
    try:
        if hasattr(update_or_query, 'message'):
            await update_or_query.message.reply_text("üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        else:
            await update_or_query.reply_text("üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_final_history: {e}")
