#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã MathIDE.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤.
"""

import sys
import os
from typing import List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))


def _test_import(
    module_path: str, items: List[str], description: str
) -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–æ–¥—É–ª—è.

    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'core.types')
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞

    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        module = __import__(module_path, fromlist=items)
        for item in items:
            if not hasattr(module, item):
                return False, f"–≠–ª–µ–º–µ–Ω—Ç '{item}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ {module_path}"
        return True, f"‚úÖ {description}: {', '.join(items)}"
    except ImportError as e:
        return False, f"‚ùå {description}: ImportError - {str(e)}"
    except Exception as e:
        return False, f"‚ùå {description}: {type(e).__name__} - {str(e)}"


def _test_optional_import(module_path: str, description: str) -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Å –æ–±—Ö–æ–¥–æ–º –ø—Ä–æ–±–ª–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.

    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞

    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        __import__(module_path)
        return True, f"‚úÖ {description}: –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    except ImportError as e:
        error_msg = str(e)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        dependency_errors = ["click", "telegram", "fastapi", "uvicorn", "jinja2"]
        if any(dep in error_msg.lower() for dep in dependency_errors):
            return (
                True,
                f"‚ö†Ô∏è  {description}: –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ({error_msg.split()[-1]})",
            )
        else:
            return False, f"‚ùå {description}: ImportError - {error_msg}"
    except Exception as e:
        return False, f"‚ùå {description}: {type(e).__name__} - {str(e)}"


def _test_simple_import(module_path: str, description: str) -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è.

    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é
        description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞

    Returns:
        Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        __import__(module_path)
        return True, f"‚úÖ {description}: –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    except ImportError as e:
        return False, f"‚ùå {description}: ImportError - {str(e)}"
    except Exception as e:
        return False, f"‚ùå {description}: {type(e).__name__} - {str(e)}"


class TestArchitecture:
    """–¢–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã."""

    def test_core_modules(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —è–¥—Ä–∞."""
        success, message = _test_import(
            "core",
            ["TransformationEngine", "SolutionHistory", "HistoryStep"],
            "Core –º–æ–¥—É–ª–∏",
        )
        print(message)
        assert success, message

    def test_core_types(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        success, message = _test_import(
            "core.types",
            ["Transformation", "SolutionStep", "GenerationResult"],
            "Core —Ç–∏–ø—ã",
        )
        print(message)
        assert success, message

    def test_core_exceptions(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
        success, message = _test_import(
            "core.exceptions",
            ["MathIDEError", "GPTError", "ParseError"],
            "Core –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
        )
        print(message)
        assert success, message

    def test_gpt_client(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ GPT –∫–ª–∏–µ–Ω—Ç–∞."""
        success, message = _test_import("core.gpt_client", ["GPTClient"], "GPT –∫–ª–∏–µ–Ω—Ç")
        print(message)
        assert success, message

    def test_parsers(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤."""
        success, message = _test_import(
            "core.parsers", ["safe_json_parse", "fix_latex_escapes_in_json"], "–ü–∞—Ä—Å–µ—Ä—ã"
        )
        print(message)
        assert success, message

    def test_prompts(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤."""
        success, message = _test_import("core.prompts", ["PromptManager"], "–ü—Ä–æ–º–ø—Ç—ã")
        print(message)
        assert success, message

    def test_math_utils(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ç–∏–ª–∏—Ç."""
        success, message = _test_import(
            "utils.math_utils", ["validate_latex_expression"], "Math —É—Ç–∏–ª–∏—Ç—ã"
        )
        print(message)
        assert success, message

    def test_logging_utils(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        success, message = _test_import(
            "utils.logging_utils", ["setup_logging"], "Logging —É—Ç–∏–ª–∏—Ç—ã"
        )
        print(message)
        assert success, message

    def test_history_module(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∏—Å—Ç–æ—Ä–∏–∏."""
        success, message = _test_simple_import("core.history", "–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π")
        print(message)
        assert success, message

    def test_engine_module(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –¥–≤–∏–∂–∫–∞."""
        success, message = _test_simple_import("core.engine", "–î–≤–∏–∂–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
        print(message)
        assert success, message

    def test_utils_module(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —É—Ç–∏–ª–∏—Ç."""
        success, message = _test_simple_import("utils", "–£—Ç–∏–ª–∏—Ç—ã")
        print(message)
        assert success, message


class TestOptionalInterfaces:
    """–¢–µ—Å—Ç—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (–º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)."""

    def test_cli_interface(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        success, message = _test_optional_import("interfaces.cli", "CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print(message)
        # –ù–µ —Ç—Ä–µ–±—É–µ–º —É—Å–ø–µ—Ö–∞ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

    def test_telegram_interface(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        success, message = _test_optional_import(
            "interfaces.telegram_bot", "Telegram –±–æ—Ç"
        )
        print(message)
        # –ù–µ —Ç—Ä–µ–±—É–µ–º —É—Å–ø–µ—Ö–∞ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

    def test_interfaces_base(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."""
        success, message = _test_simple_import(
            "interfaces", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å)"
        )
        print(message)
        assert success, message


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
def run_architecture_tests() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""

    print("üéØ –¢–ï–°–¢ –ú–û–î–£–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ MathIDE")
    print("=" * 60)
    print()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        # Core –º–æ–¥—É–ª–∏ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        (
            _test_import,
            (
                "core",
                ["TransformationEngine", "SolutionHistory", "HistoryStep"],
                "Core –º–æ–¥—É–ª–∏",
            ),
        ),
        # Core —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        (
            _test_import,
            (
                "core.types",
                ["Transformation", "SolutionStep", "GenerationResult"],
                "Core —Ç–∏–ø—ã",
            ),
        ),
        # Core –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        (
            _test_import,
            (
                "core.exceptions",
                ["MathIDEError", "GPTError", "ParseError"],
                "Core –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
            ),
        ),
        # GPT –∫–ª–∏–µ–Ω—Ç
        (_test_import, ("core.gpt_client", ["GPTClient"], "GPT –∫–ª–∏–µ–Ω—Ç")),
        # –ü–∞—Ä—Å–µ—Ä—ã
        (
            _test_import,
            (
                "core.parsers",
                ["safe_json_parse", "fix_latex_escapes_in_json"],
                "–ü–∞—Ä—Å–µ—Ä—ã",
            ),
        ),
        # –ü—Ä–æ–º–ø—Ç—ã
        (_test_import, ("core.prompts", ["PromptManager"], "–ü—Ä–æ–º–ø—Ç—ã")),
        # Math —É—Ç–∏–ª–∏—Ç—ã
        (
            _test_import,
            ("utils.math_utils", ["validate_latex_expression"], "Math —É—Ç–∏–ª–∏—Ç—ã"),
        ),
        # Logging —É—Ç–∏–ª–∏—Ç—ã
        (_test_import, ("utils.logging_utils", ["setup_logging"], "Logging —É—Ç–∏–ª–∏—Ç—ã")),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞)
        (_test_simple_import, ("core.history", "–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π")),
        (_test_simple_import, ("core.engine", "–î–≤–∏–∂–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")),
        (_test_simple_import, ("utils", "–£—Ç–∏–ª–∏—Ç—ã")),
    ]

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    optional_tests = [
        (_test_optional_import, ("interfaces.cli", "CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")),
        (_test_optional_import, ("interfaces.telegram_bot", "Telegram –±–æ—Ç")),
        (_test_simple_import, ("interfaces", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å)")),
    ]

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0

    print("üîç –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:")
    print("-" * 40)

    for test_func, args in tests:
        success, message = test_func(*args)
        print(message)
        if success:
            passed += 1
        else:
            failed += 1

    print()
    print("üîç –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã):")
    print("-" * 40)

    for test_func, args in optional_tests:
        success, message = test_func(*args)
        print(message)

    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 40)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed / (passed + failed) * 100):.1f}%")

    if failed == 0:
        print()
        print("üéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MathIDE –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print()
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞."""
    run_architecture_tests()
    sys.exit(0 if run_architecture_tests() else 1)


if __name__ == "__main__":
    main()
