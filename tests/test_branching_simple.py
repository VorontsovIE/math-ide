"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π MathIDE.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from core.types import (
    SolutionType,
    create_solution_step,
    create_system_step,
    create_cases_step,
    create_alternatives_step,
    SolutionStep,
    SolutionBranch,
)


def test_simple_step_creation() -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–≥–∞."""
    step = create_solution_step("x + 2 = 5")
    assert step.expression == "x + 2 = 5"
    assert step.solution_type == SolutionType.SINGLE
    assert len(step.branches) == 0


def test_system_step_creation() -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""
    equations = ["x + y = 5", "x - y = 1"]
    step = create_system_step("–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π", equations)
    assert step.expression == "–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π"
    assert step.solution_type == SolutionType.SYSTEM
    assert len(step.branches) == 2


def test_cases_step_creation() -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å —Ä–∞–∑–±–æ—Ä–æ–º —Å–ª—É—á–∞–µ–≤."""
    cases = [("x ‚â• 0", "x = 2", "–°–ª—É—á–∞–π 1: x ‚â• 0"), ("x < 0", "x = -2", "–°–ª—É—á–∞–π 2: x < 0")]
    step = create_cases_step("|x| = 2", cases)
    assert step.expression == "|x| = 2"
    assert step.solution_type == SolutionType.CASES
    assert len(step.branches) == 2


def test_alternatives_step_creation() -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—É—Ç—è–º–∏."""
    alternatives = [
        ("–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "x^2 - 4 = (x-2)(x+2)"),
        ("–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "x^2 = 4"),
    ]
    step = create_alternatives_step("x^2 - 4 = 0", alternatives)
    assert step.expression == "x^2 - 4 = 0"
    assert step.solution_type == SolutionType.ALTERNATIVES
    assert len(step.branches) == 2


def test_complex_branching_scenario() -> None:
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–µ—Ç–≤–ª–µ–Ω–∏—è."""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É —Å –º–æ–¥—É–ª–µ–º
    cases = [("x ‚â• 0", "x + 1 = 3", "–°–ª—É—á–∞–π 1: x ‚â• 0"), ("x < 0", "-x + 1 = 3", "–°–ª—É—á–∞–π 2: x < 0")]
    step = create_cases_step("|x| + 1 = 3", cases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert step.solution_type == SolutionType.CASES
    assert len(step.branches) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ç–≤–∏
    branch1 = step.branches[0]
    assert branch1.name == "–°–ª—É—á–∞–π 1: x ‚â• 0"
    assert branch1.expression == "x + 1 = 3"
    assert branch1.condition == "x ‚â• 0"

    branch2 = step.branches[1]
    assert branch2.name == "–°–ª—É—á–∞–π 2: x < 0"
    assert branch2.expression == "-x + 1 = 3"
    assert branch2.condition == "x < 0"

    print("‚úÖ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_simple_branching() -> None:
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ—Ç–≤–ª–µ–Ω–∏—è."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —à–∞–≥
    step = SolutionStep(expression="x^2 = 4")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–≥ —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert step.expression == "x^2 = 4"
    assert step.solution_type == SolutionType.SINGLE
    assert step.branches == []


def test_branching_with_conditions() -> None:
    """–¢–µ—Å—Ç –≤–µ—Ç–≤–ª–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏."""
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–≤–∏
    branches = [
        SolutionBranch(
            id="branch_1",
            name="x = 2",
            expression="x = 2",
            condition="x > 0",
            is_valid=True,
        ),
        SolutionBranch(
            id="branch_2",
            name="x = -2",
            expression="x = -2",
            condition="x < 0",
            is_valid=True,
        ),
    ]

    # –°–æ–∑–¥–∞–µ–º —à–∞–≥ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏–µ–º
    step = SolutionStep(
        expression="x^2 = 4", solution_type=SolutionType.CASES, branches=branches
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    assert len(step.branches) == 2
    assert step.branches[0].name == "x = 2"
    assert step.branches[1].name == "x = -2"


def test_branching_validation() -> None:
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è."""
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é –≤–µ—Ç–≤—å
    invalid_branch = SolutionBranch(
        id="invalid", name="Invalid", expression="", condition=None, is_valid=False
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    assert not invalid_branch.is_valid
    assert invalid_branch.expression == ""


def test_branching_metadata() -> None:
    """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ—Ç–≤–ª–µ–Ω–∏—è."""
    metadata = {"complexity": "medium", "requires_analysis": True}

    step = SolutionStep(
        expression="|x| = 3", solution_type=SolutionType.CASES, metadata=metadata
    )

    assert step.metadata["complexity"] == "medium"
    assert step.metadata["requires_analysis"] is True


def test_branching_serialization() -> None:
    """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è."""
    branches = [
        SolutionBranch(
            id="test_branch",
            name="Test Branch",
            expression="x = 1",
            condition="x > 0",
            is_valid=True,
        )
    ]

    step = SolutionStep(
        expression="x^2 = 1", solution_type=SolutionType.CASES, branches=branches
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
    step_dict = step.__dict__
    assert "expression" in step_dict
    assert "solution_type" in step_dict
    assert "branches" in step_dict


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π MathIDE\n")

    try:
        test_simple_step_creation()
        test_system_step_creation()
        test_cases_step_creation()
        test_alternatives_step_creation()
        test_complex_branching_scenario()
        test_simple_branching()
        test_branching_with_conditions()
        test_branching_validation()
        test_branching_metadata()
        test_branching_serialization()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        return False
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

    return True


if __name__ == "__main__":
    run_all_tests()
