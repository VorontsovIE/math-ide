"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π MathIDE.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from core.types import (
    SolutionType,
    create_solution_step,
    create_system_step,
    create_cases_step,
    create_alternatives_step,
)


def test_solution_step_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–≥–∞ —Ä–µ—à–µ–Ω–∏—è."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–≥–∞ —Ä–µ—à–µ–Ω–∏—è...")
    step = create_solution_step("x + 2 = 5")

    assert step.expression == "x + 2 = 5"
    assert step.solution_type == SolutionType.SINGLE
    assert len(step.branches) == 0
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–≥–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_system_step_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π...")
    equations = ["2x + 3y = 7", "x - y = 1"]
    step = create_system_step("–°–∏—Å—Ç–µ–º–∞ –¥–≤—É—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –¥–≤—É–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏", equations)

    assert step.expression == "–°–∏—Å—Ç–µ–º–∞ –¥–≤—É—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π —Å –¥–≤—É–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏"
    assert step.solution_type == SolutionType.SYSTEM
    assert len(step.branches) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
    assert step.branches[0].id == "eq_0"
    assert step.branches[0].name == "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ 1"
    assert step.branches[0].expression == "2x + 3y = 7"
    assert step.branches[0].condition is None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
    assert step.branches[1].id == "eq_1"
    assert step.branches[1].name == "–£—Ä–∞–≤–Ω–µ–Ω–∏–µ 2"
    assert step.branches[1].expression == "x - y = 1"
    assert step.branches[1].condition is None
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_cases_step_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å —Ä–∞–∑–±–æ—Ä–æ–º —Å–ª—É—á–∞–µ–≤."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ —Å–ª—É—á–∞–µ–≤...")
    cases = [
        ("x ‚â• 0", "x + 2 = 5", "–°–ª—É—á–∞–π 1: x ‚â• 0"),
        ("x < 0", "-x + 2 = 5", "–°–ª—É—á–∞–π 2: x < 0"),
    ]
    step = create_cases_step("–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è |x| + 2 = 5", cases)

    assert step.expression == "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è |x| + 2 = 5"
    assert step.solution_type == SolutionType.CASES
    assert len(step.branches) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π
    assert step.branches[0].id == "case_0"
    assert step.branches[0].name == "–°–ª—É—á–∞–π 1: x ‚â• 0"
    assert step.branches[0].expression == "x + 2 = 5"
    assert step.branches[0].condition == "x ‚â• 0"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π
    assert step.branches[1].id == "case_1"
    assert step.branches[1].name == "–°–ª—É—á–∞–π 2: x < 0"
    assert step.branches[1].expression == "-x + 2 = 5"
    assert step.branches[1].condition == "x < 0"
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ —Å–ª—É—á–∞–µ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_alternatives_step_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...")
    alternatives = [
        ("(x - 2)(x + 3) = 0", "–ú–µ—Ç–æ–¥ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏"),
        ("D = b¬≤ - 4ac = 1 + 24 = 25", "–ú–µ—Ç–æ–¥ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞"),
    ]
    step = create_alternatives_step(
        "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è x¬≤ + x - 6 = 0", alternatives
    )

    assert step.expression == "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è x¬≤ + x - 6 = 0"
    assert step.solution_type == SolutionType.ALTERNATIVES
    assert len(step.branches) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥
    assert step.branches[0].id == "alt_0"
    assert step.branches[0].name == "–ú–µ—Ç–æ–¥ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏"
    assert step.branches[0].expression == "(x - 2)(x + 3) = 0"
    assert step.branches[0].condition is None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥
    assert step.branches[1].id == "alt_1"
    assert step.branches[1].name == "–ú–µ—Ç–æ–¥ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞"
    assert step.branches[1].expression == "D = b¬≤ - 4ac = 1 + 24 = 25"
    assert step.branches[1].condition is None
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_complex_branching_scenario():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –≤–µ—Ç–≤—è—â–∏–º–∏—Å—è —Ä–µ—à–µ–Ω–∏—è–º–∏."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –≤–µ—Ç–≤—è—â–∏–º–∏—Å—è —Ä–µ—à–µ–Ω–∏—è–º–∏...")
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
    initial_step = create_solution_step("–†–µ—à–∏—Ç—å: |x - 1| = 2x + 3")

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–±–æ—Ä —Å–ª—É—á–∞–µ–≤
    cases = [
        ("x ‚â• 1", "x - 1 = 2x + 3", "–°–ª—É—á–∞–π 1: x ‚â• 1"),
        ("x < 1", "-(x - 1) = 2x + 3", "–°–ª—É—á–∞–π 2: x < 1"),
    ]
    cases_step = create_cases_step("–†–∞–∑–±–æ—Ä —Å–ª—É—á–∞–µ–≤ –¥–ª—è –º–æ–¥—É–ª—è", cases)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert initial_step.solution_type == SolutionType.SINGLE
    assert cases_step.solution_type == SolutionType.CASES
    assert len(cases_step.branches) == 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π
    first_case = cases_step.branches[0]
    assert first_case.condition == "x ‚â• 1"
    assert first_case.expression == "x - 1 = 2x + 3"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π
    second_case = cases_step.branches[1]
    assert second_case.condition == "x < 1"
    assert second_case.expression == "-(x - 1) = 2x + 3"
    print("‚úÖ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π MathIDE\n")

    try:
        test_solution_step_creation()
        test_system_step_creation()
        test_cases_step_creation()
        test_alternatives_step_creation()
        test_complex_branching_scenario()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ç–≤—è—â–∏—Ö—Å—è —Ä–µ—à–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        return False
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

    return True


if __name__ == "__main__":
    run_all_tests()
