---
description: 
globs: 
alwaysApply: true
---
{alwaysApply: true, globs: ["**/*"]}

# MathIDE: Project Requirements Document (PRD)

## 1. Overview / Problem
MathIDE — это интерактивная среда для обучения решению математических задач. Она помогает ученику пошагово преобразовывать математические выражения (уравнения, неравенства, системы и т.д.), предоставляя только допустимые и осмысленные операции, которые можно применить на каждом этапе. MathIDE не решает задачу за пользователя, а тренирует навык самостоятельного планирования решения, предлагая автокомплит допустимых действий и ранжируя их по полезности.

## 2. Key User Flows
- Пользователь вводит задачу (уравнение, систему, неравенство и т.д.), которую хочет решить.
- MathIDE анализирует задачу и предлагает список допустимых преобразований (автокомплит), перемешивая топ-5 наиболее релевантных.
- Пользователь выбирает одно из предложенных преобразований.
- MathIDE применяет выбранное преобразование и отображает новое состояние задачи.
- **После применения преобразования пользователь может:**
  - **Проверить корректность результата и запросить пересчёт при обнаружении ошибки**
  - **Предложить свой вариант правильного результата**
  - **Сообщить о самостоятельно выполненном преобразовании для проверки**
- История шагов сохраняется, пользователь может вернуться к любому из предыдущих состояний.
- **Система может рекомендовать возврат к более подходящему прошлому шагу, если решение отклонилось от оптимального пути.**
- В истории шагов отображаются не только математические выражения, но и выбранные пользователем преобразования (описание, тип, LaTeX-форма).
- В случае разветвления решения (например, при раскрытии модуля) отображаются все текущие ветви.
- Пользователь может завершить решение или продолжить работу.
- Поддерживаются интерфейсы: терминал, Telegram-бот, веб-браузер.

## 3. Functional Requirements
- [x] Приём задачи от пользователя (LaTeX-формат, plain text).
- [x] Генерация списка допустимых преобразований через GPT API (с возможностью смены модели).
- [x] Ранжирование и перемешивание топ-5 предложений (перемешивание — случайное, чтобы пользователь не выбирал всегда первый вариант автоматически).
- [x] Применение выбранного преобразования к задаче.
- [x] **Проверка и исправление ошибок в преобразованиях:**
  - [x] **Пересчёт при обнаружении ошибки пользователем**
  - [x] **Проверка предложений пользователя**
  - [x] **Проверка самостоятельно выполненных преобразований**
- [x] **Анализ прогресса решения и рекомендации возврата к более подходящим шагам**
- [x] Ведение истории шагов, возможность возврата к предыдущим (реализуется на этапах после MVP, но архитектура должна это предусматривать).
- [x] В истории шагов для каждого шага хранится: исходная задача, доступные варианты преобразований, выбранное преобразование, результат, а также варианты параметров преобразования (на будущее).
- [x] Отображение формул в LaTeX (с рендерингом там, где возможно: MathJax для web, генерация картинок для Telegram).
- [x] Поддержка ветвящихся решений (через преобразования типа `expand_cases`).
- [x] Модульная архитектура ядра (легко расширяемая).
- [x] Вынесение промптов для GPT в отдельный модуль/файл (.md с поддержкой переменных).
- [x] CLI, Telegram-бот, Web-интерфейс.
- [x] Лёгкая смена GPT-модели (OpenAI, Qwen и др. — начиная с v1.0).
- [x] Документированная структура кода и API.

## 3.1. Архитектура ядра генерации преобразований (уточнено)

**Ядро генерации допустимых преобразований** — это модуль, который:
- Принимает текущий шаг решения (`SolutionStep`).
- Возвращает список допустимых преобразований, которые можно применить на данном шаге.
- Использует GPT API (или совместимую модель) для генерации этих преобразований, с возможностью смены модели через конфиг.
- Позволяет интегрировать дополнительные эвристики или фильтры для отбора осмысленных преобразований.
- **Анализирует прогресс решения и предлагает рекомендации по оптимизации пути решения.**
- **Проверяет корректность выполненных преобразований и исправляет ошибки.**
- Архитектурно отделён от пользовательских интерфейсов и истории шагов.
- Входные и выходные данные оформлены в виде структурированных объектов (Python dataclass).
- Позволяет легко расширять набор поддерживаемых типов преобразований и моделей.

**Пример интерфейса ядра:**
- Вход: объект `SolutionStep` (содержит LaTeX-представление текущего состояния задачи)
- Выход: список объектов-преобразований (каждое содержит описание, LaTeX-форму, тип, метаданные)
- **Анализ прогресса**: метод `analyze_progress()` возвращает `ProgressAnalysisResult`
- **Проверка преобразований**: метод `verify_transformation()` возвращает `VerificationResult`

**Назначение:**
- Обеспечить модульность, расширяемость и независимость логики генерации преобразований от UI и хранения истории.
- **Повысить качество обучения через проверку ошибок и оптимизацию пути решения.**

## 4. Non-goals
- Автоматическое решение задач без участия пользователя.
- Обучение пользователя технике ручных преобразований (цель — планирование, а не вычисления).
- Поддержка сложных математических объектов (интегралы, ряды и т.д.) на первом этапе.
- Мобильные приложения.
- Голосовой ввод.

## 5. Milestones & Release Plan
### MVP ✅ COMPLETED
- [x] Ядро генерации предложений и применения преобразований через GPT API
- [x] CLI-интерфейс
- [x] История шагов
- [x] LaTeX-отображение
- [x] Лёгкая смена модели
- [x] Вынесение промптов
- [x] Перемешивание топ-5 предложений

### v0.2 ✅ COMPLETED
- [x] Telegram-бот (минимальный)
- [ ] Web-интерфейс (минимальный)
- [x] Ветвящиеся решения

### v1.0 ✅ COMPLETED
- [x] Расширяемая архитектура ядра
- [x] Документация
- [x] Улучшенный UX

### v1.1 ✅ COMPLETED
- [x] MathIDE вместе с допустимыми преобразованиями сразу запрашивает результаты этих преобразований (предпоказ), режим конфигурируемый
- [x] Пользователь видит не только варианты преобразования, но и к чему они приведут

### v1.2 ✅ COMPLETED
- [x] Преобразования могут иметь настраиваемые параметры
- [x] MathIDE интерактивно запрашивает у пользователя параметры преобразования (например, множитель для домножения)
- [x] Предлагает варианты значений параметра

### v1.3 ✅ COMPLETED
- [x] **Пользователь может вводить собственные преобразования**
- [x] **Система проверяет корректность самостоятельно выполненных преобразований**
- [x] **Для пользовательских преобразований доступна проверка результата**

### v1.3a (Параметризация преобразований) ✅ COMPLETED
- [x] **Преобразования могут иметь настраиваемые параметры (например, "домножить на {FACTOR}")**
- [x] **MathIDE интерактивно запрашивает у пользователя значения параметров**
- [x] **Система предлагает несколько вариантов значений параметров**

### v1.4 ✅ COMPLETED
- [x] **Система анализирует прогресс решения и рекомендует возврат к более подходящим шагам**
- [x] **Мягкие рекомендации без принуждения пользователя**  
- [x] **Возможность применить преобразование к любому шагу из истории (создает новую ветвь)**
- [x] **Пользователь может вернуться к произвольному этапу истории через интерфейс (переключение контекста)**

### v1.5 ✅ COMPLETED
- [x] **Система проверки и исправления ошибок в математических преобразованиях**
- [x] **Три типа проверки: пересчёт, проверка предложения пользователя, проверка самостоятельного преобразования**
- [x] **Детальное объяснение найденных ошибок с пошаговой проверкой**
- [x] **Интерактивные кнопки проверки в Telegram-боте**

### v1.6 ✅ COMPLETED (Инфраструктура и деплой)
- [x] **Переход с poetry на uv для управления зависимостями**
- [x] **Создание скрипта для деплоя приложения на VPS (Ubuntu)**
- [ ] **Настройка CI/CD пайплайна через GitHub Actions**
- [x] **Документация по деплою и администрированию**

### v1.7 🔄 IN PROGRESS (Архитектурный рефакторинг)
- [x] **Рефакторинг монолитного TransformationEngine в модульную архитектуру**
- [x] **Разделение CLI на специализированные компоненты**
- [x] **Создание 41 специализированного модуля**
- [x] **Соблюдение принципов SOLID во всех модулях**
- [x] **Автоматизированное тестирование архитектуры**

---
Документ обновляется по мере развития проекта. 
**Последнее обновление:** Завершен архитектурный рефакторинг с созданием 41 специализированного модуля. 