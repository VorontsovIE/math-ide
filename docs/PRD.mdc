---
description: 
globs: 
alwaysApply: true
---
{alwaysApply: true, globs: ["**/*"]}

# MathIDE: Project Requirements Document (PRD)

## 1. Overview / Problem
MathIDE — это интерактивная среда для обучения решению математических уравнений. Она помогает ученику пошагово преобразовывать уравнения, предоставляя только допустимые и осмысленные операции, которые можно применить на каждом этапе. MathIDE не решает задачу за пользователя, а тренирует навык самостоятельного планирования решения, предлагая автокомплит допустимых действий и ранжируя их по полезности.

## 2. Key User Flows
- Пользователь вводит уравнение (или набор уравнений), которое хочет решить.
- MathIDE анализирует уравнение и предлагает список допустимых преобразований (автокомплит), перемешивая топ-5 наиболее релевантных.
- Пользователь выбирает одно из предложенных преобразований.
- MathIDE применяет выбранное преобразование и отображает новое состояние уравнения (или системы уравнений).
- История шагов сохраняется, пользователь может вернуться к любому из предыдущих состояний.
- В истории шагов отображаются не только уравнения, но и выбранные пользователем преобразования (описание, тип, LaTeX-форма).
- В случае разветвления (например, система или альтернатива) отображаются все текущие уравнения.
- Пользователь может завершить решение или продолжить работу.
- Поддерживаются интерфейсы: терминал, Telegram-бот, веб-браузер.

## 3. Functional Requirements
- [ ] Приём уравнения от пользователя (LaTeX-формат, plain text).
- [ ] Генерация списка допустимых преобразований через GPT API (с возможностью смены модели).
- [ ] Ранжирование и перемешивание топ-5 предложений.
- [ ] Применение выбранного преобразования к уравнению (или системе).
- [ ] Ведение истории шагов, возможность возврата к предыдущим.
- [ ] Отображение формул в LaTeX (с рендерингом там, где возможно).
- [ ] Поддержка ветвящихся решений (системы, альтернативы).
- [ ] Модульная архитектура ядра (легко расширяемая).
- [ ] Вынесение промптов для GPT в отдельный модуль/файл.
- [ ] CLI, Telegram-бот, Web-интерфейс.
- [ ] Лёгкая смена GPT-модели (OpenAI, Qwen и др.).
- [ ] Документированная структура кода и API.

## 3.1. Архитектура ядра генерации преобразований (уточнено)

**Ядро генерации допустимых преобразований** — это модуль, который:
- Принимает текущее математическое выражение (или состояние задачи, включая систему уравнений или альтернативные ветви).
- Возвращает список допустимых преобразований, которые можно применить на данном шаге.
- Использует GPT API (или совместимую модель) для генерации этих преобразований, с возможностью смены модели через конфиг.
- Позволяет интегрировать дополнительные эвристики или фильтры для отбора осмысленных преобразований.
- Архитектурно отделён от пользовательских интерфейсов и истории шагов.
- Входные и выходные данные оформлены в виде структурированных объектов (например, Python dataclass или аналогичный формат).
- Позволяет легко расширять набор поддерживаемых типов преобразований и моделей.

**Пример интерфейса ядра:**
- Вход: объект состояния (уравнение/система уравнений/уравнения альтернативных ветвей решения, система, история)
- Выход: список объектов-преобразований (каждое содержит описание, LaTeX-форму, тип, метаданные)

**Назначение:**
- Обеспечить модульность, расширяемость и независимость логики генерации преобразований от UI и хранения истории.

## 4. Non-goals
- Автоматическое решение уравнений без участия пользователя.
- Обучение пользователя технике ручных преобразований (цель — планирование, а не вычисления).
- Поддержка сложных математических объектов (интегралы, ряды и т.д.) на первом этапе.
- Мобильные приложения.
- Голосовой ввод.

## 5. Milestones & Release Plan
### MVP
- [ ] Ядро генерации предложений и применения преобразований через GPT API
- [ ] CLI-интерфейс
- [ ] История шагов
- [ ] LaTeX-отображение
- [ ] Лёгкая смена модели
- [ ] Вынесение промптов
- [ ] Перемешивание топ-5 предложений

### v0.2
- [ ] Telegram-бот (минимальный)
- [ ] Web-интерфейс (минимальный)
- [ ] Ветвящиеся решения

### v1.0
- [ ] Расширяемая архитектура ядра
- [ ] Документация
- [ ] Улучшенный UX

### v1.1
- [ ] MathIDE вместе с допустимыми преобразованиями сразу запрашивает результаты этих преобразований (предпоказ), режим конфигурируемый
- [ ] Пользователь видит не только варианты преобразования, но и к чему они приведут

### v1.2
- [ ] Преобразования могут иметь настраиваемые параметры
- [ ] MathIDE интерактивно запрашивает у пользователя параметры преобразования (например, множитель для домножения)
- [ ] Предлагает варианты значений параметра

### v1.3
- [ ] Пользователь может вводить собственные преобразования и значения параметров
- [ ] Для пользовательских преобразований предпоказ результата невозможен

### v1.4
- [ ] Пользователь может вернуться к произвольному этапу истории через интерфейс

---
Документ обновляется по мере развития проекта. 