---
description: 
globs: 
alwaysApply: false
---
{alwaysApply: true, globs: ["**/*"]}

# План разработки MathIDE

## Этап 1: MVP
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 1.1. Реализовать ядро генерации допустимых преобразований      | done        | Реализовано ядро с интеграцией GPT API, поддержкой промптов, перемешиванием топ-5, тестами и обработкой ошибок. |
| 1.2. Реализовать применение выбранного преобразования          | done        | Применение преобразования реализовано через GPT API, с валидацией, объяснением и обработкой ошибок. |
| 1.3. Интегрировать GPT API (OpenAI, с возможностью смены)      | done        | Интеграция с OpenAI GPT реализована, модель и ключ задаются через параметры движка. |
| 1.4. CLI-интерфейс для пользователя                            | done        | Реализован интерактивный CLI с поддержкой выбора преобразований, просмотра истории и конфигурации через параметры. |
| 1.5. Ведение истории шагов                                     | done        | Реализован модуль истории шагов с поддержкой хранения всех данных, экспортом/импортом и тестами. |
| 1.5a. В истории шагов отображаются не только математические выражения, но и выбранные пользователем преобразования (описание, тип, LaTeX-форма) | done | Вся информация о выбранных преобразованиях сохраняется в истории. |
| 1.6. LaTeX-отображение в CLI                                   | done        | Реализовано отображение LaTeX через Unicode-символы с использованием rich, поддержка базовых математических операторов. |
| 1.7. Перемешивание топ-5 предложений                           | done        | Перемешивание реализовано в ядре при генерации преобразований. |
| 1.8. Проверка завершённости решения задачи                     | done        | Реализована проверка завершённости через отдельный промпт и метод check_solution_completeness. |
| 1.9. Промпты вынесены в отдельные файлы                        | done        | Все промпты вынесены в отдельные .md-файлы и подставляются динамически. |

### Критерии приёмки этапа 1 (MVP)
- [x] Ядро корректно генерирует и применяет преобразования
- [x] CLI-интерфейс работает и позволяет пройти полный сценарий, вплоть до завершения решения задачи
- [x] История шагов сохраняется и доступна для возврата
- [x] В истории шагов отображаются не только математические выражения, но и выбранные пользователем преобразования (описание, тип, LaTeX-форма)
- [x] Формулы отображаются в LaTeX (rich)
- [x] Возможна смена GPT-модели через конфиг
- [x] Промпты редактируются без изменения кода
- [x] Топ-5 предложений перемешиваются

## Этап 2: v0.2
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 2.1. Реализовать Telegram-бот                                 | done        | Реализован бот с поддержкой LaTeX через изображения, историей шагов и inline-кнопками для выбора преобразований |
| 2.2. Реализовать минимальный Web-интерфейс                    | todo        |                                                                                        |
| 2.3. Поддержка ветвящихся решений (системы, альтернативы)     | todo        |                                                                                        |

### Критерии приёмки этапа 2
- [ ] Telegram-бот работает по основному сценарию
- [ ] Web-интерфейс доступен и отображает формулы
- [ ] Ветвящиеся решения корректно отображаются и обрабатываются

## Этап 3: v1.0
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 3.1. Архитектура ядра расширяема и документирована            | todo        |                                                                                        |
| 3.2. Улучшенный UX CLI/Web/Telegram                           | todo        |                                                                                        |
| 3.3. Документация для разработчиков и пользователей           | todo        |                                                                                        |

### Критерии приёмки этапа 3
- [ ] Архитектура легко расширяется (новые интерфейсы, модели)
- [ ] Пользовательский опыт улучшен (LaTeX отображаются графически, история шагов показывается компактно и с визуальным отделением шагов)
- [ ] Документация полная и актуальная

## Этап 4: v1.1
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 4.1. Ядро сразу запрашивает результаты преобразований (предпоказ), режим конфигурируемый | done        | Реализован режим предпоказа через параметр preview_mode в TransformationEngine и CLI. Пользователь видит результаты преобразований в дополнительной колонке таблицы. |

### Критерии приёмки этапа 4 (v1.1)
- [x] MathIDE может работать в режиме предпоказа результатов преобразований
- [x] Режим предпоказа конфигурируется
- [x] Пользователь видит не только варианты преобразования, но и к чему они приведут

## Этап 5: v1.2
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 5.1. Преобразования могут иметь параметры, MathIDE интерактивно запрашивает их у пользователя | todo        | Пример: «домножить обе части на {FACTOR}» — пользователь выбирает/вводит параметр |

### Критерии приёмки этапа 5 (v1.2)
- [ ] MathIDE поддерживает преобразования с параметрами
- [ ] Пользователь может выбрать или ввести параметр преобразования
- [ ] Система предлагает несколько вариантов значений параметра

## Этап 6: v1.3
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 6.1. Пользователь может вводить собственные преобразования и параметры, без предпоказа результата | todo        | |

### Критерии приёмки этапа 6 (v1.3)
- [ ] Пользователь может ввести собственное преобразование и параметры
- [ ] Для пользовательских преобразований предпоказ результата невозможен

## Этап 7: v1.4
### Задачи
| Задача                                                        | Статус      | Комментарии/Детализация                                                                 |
|---------------------------------------------------------------|-------------|----------------------------------------------------------------------------------------|
| 7.1. Интерфейс позволяет вернуться к произвольному этапу истории | todo        | |

### Критерии приёмки этапа 7 (v1.4)
- [ ] Пользователь может вернуться к произвольному этапу истории через интерфейс

## Часто встречающиеся проблемы
- Смешивание логики ядра и интерфейсов
- Жёстко зашитые промпты или параметры моделей
- Отсутствие тестов для критичных компонентов
- Необработанные ошибки при работе с API
- Неочевидная структура истории шагов
- Проблемы с отображением LaTeX в разных средах
- Лишние файлы в git-репозитории

## Уточнения по реализации (апрель 2024)

1. **История шагов**
   - Для каждого шага истории необходимо хранить:
     - исходную задачу (математическое выражение в LaTeX),
     - доступные варианты преобразований,
     - выбранное преобразование,
     - результат применения преобразования.
   - Необходимо предусмотреть, что выбранное преобразование в будущем будет параметризуемо (и варианты параметров также стоит хранить).
   - Следует хранить промежуточные данные, необходимые для отката (например, parent-идентификаторы шагов).

2. **Промпты**
   - Промпты должны храниться в отдельных .md-файлах.
   - В промптах должна быть поддержка подставляемых переменных (например, текущее состояние задачи, описание преобразования и т.д.).

3. **LaTeX-отображение**
   - Для web-интерфейса используется MathJax.
   - Для Telegram-бота требуется генерация картинок формул.

4. **История шагов в интерфейсах**
   - В MVP реализуется только просмотр истории шагов (без отката и возврата).

5. **Перемешивание топ-5 вариантов**
   - Перемешивание вариантов преобразований должно быть случайным.
   - Это сделано для того, чтобы пользователь не выбирал всегда первый вариант автоматически, а осознанно принимал решение.

6. **Тестирование**
   - В MVP основной акцент на функциональных и интеграционных тестах (end-to-end).
   - Юнит-тесты обязательны для истории решения и выбора вариантов преобразований.

7. **Поддержка других GPT**
   - В MVP поддерживается только OpenAI GPT.
   - Расширяемость под другие модели закладывается архитектурно, но реализуется на более поздних этапах.

8. **Архитектурные требования**
   - Возможность отката к произвольному шагу истории не реализуется в MVP, но архитектура должна предусматривать такую возможность в будущем.
   - Работа ведётся не с "уравнениями", а с состояниями задачи на каждом шаге решения (`SolutionStep`), которые могут включать уравнения, неравенства, системы и т.д.

9. **Типы преобразований**
   - Определён базовый список типов преобразований, который служит ориентиром для GPT. Модель может предлагать и другие типы.
   - Основные типы: `add`, `subtract`, `multiply`, `divide`, `factor`, `expand`, `collect_terms`, `substitute`, `expand_cases` (для разбора случаев, например, с модулем), `simplify`.
   - "Система уравнений" — это тип задачи, а не преобразования. "Совокупность" (альтернативные ветви решения) реализуется через преобразования типа `expand_cases`.

10. **Переменные окружения**
    - Все чувствительные данные (токены, ключи API) хранятся в `.env` файле
    - Пример настроек находится в `docs/env.example`
    - Поддерживается каскадная загрузка файлов в порядке приоритета:
      1. `.env.local` - локальные переопределения (не в git)
      2. `.env` - основной файл настроек (не в git)
      3. `.env.example` - пример настроек из `docs/env.example` (в git)
    - Если файлы отсутствуют, используются системные переменные окружения

## Рекомендуемые директивы

- Не отмечай задачу как done, пока не выполнены все критерии приёмки этапа.
- Перед началом задачи уточняй детали, если они неочевидны.
- После завершения задачи фиксируй, что было сделано и какие проблемы возникли.
