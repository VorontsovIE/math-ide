---
description: 
globs: 
alwaysApply: false
---
{alwaysApply: true, globs: ["**/*"]}

# Архитектура MathIDE

## Обзор архитектуры

MathIDE построена по модульной архитектуре с чётким разделением ответственности между компонентами. Основные принципы:

1. **Разделение ядра и интерфейсов** — логика генерации и применения преобразований отделена от пользовательских интерфейсов
2. **Модульность** — каждый компонент имеет чётко определённую ответственность
3. **Расширяемость** — архитектура позволяет легко добавлять новые интерфейсы и модели
4. **Независимость от конкретных AI-моделей** — ядро может работать с различными провайдерами GPT

## Архитектурные слои

### 1. Ядро (Core)
**Расположение:** `core/`

**Компоненты:**
- `engine.py` — основной движок генерации и применения преобразований
- `history.py` — управление историей шагов решения

**Ответственность:**
- Генерация допустимых математических преобразований через GPT API
- Применение выбранных преобразований
- Проверка завершённости решения
- Управление историей шагов

### 2. Интерфейсы (Interfaces)
**Расположение:** `interfaces/`

**Компоненты:**
- `cli.py` — командная строка
- `telegram_bot.py` — Telegram-бот
- `web.py` — веб-интерфейс (планируется)

**Ответственность:**
- Взаимодействие с пользователем
- Отображение формул в соответствующем формате
- Навигация по истории

### 3. Промпты (Prompts)
**Расположение:** `prompts/`

**Компоненты:**
- `generation.md` — промпт для генерации преобразований
- `apply.md` — промпт для применения преобразований
- `check.md` — промпт для проверки завершённости
- `transformation_types.md` — описание типов преобразований

**Ответственность:**
- Хранение промптов для GPT
- Поддержка подстановки переменных

### 4. Тесты (Tests)
**Расположение:** `tests/`

**Ответственность:**
- Юнит-тесты компонентов
- Интеграционные тесты
- Тестирование взаимодействия с GPT API

## Ключевые архитектурные решения

### 1. Модель данных

#### SolutionStep
```python
@dataclass
class SolutionStep:
    expression: str  # LaTeX-представление текущего состояния
```
**Назначение:** Представляет состояние задачи на любом этапе решения (уравнение, неравенство, система и т.д.)

#### Transformation
```python
@dataclass
class Transformation:
    description: str      # Человекочитаемое описание
    expression: str      # LaTeX-форма преобразования
    type: str           # Тип преобразования
    parameters: Optional[List[TransformationParameter]] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
```
**Назначение:** Представляет одно математическое преобразование с метаданными

#### HistoryStep
```python
@dataclass
class HistoryStep:
    id: str
    step_number: int
    expression: str
    available_transformations: List[Dict[str, Any]]
    chosen_transformation: Optional[Dict[str, Any]]
    result_expression: Optional[str]
    timestamp: datetime
    parent_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
```
**Назначение:** Полная информация о шаге для возможности отката и ветвления

### 2. Управление промптами

**Решение:** Вынесение промптов в отдельные `.md` файлы с поддержкой подстановки переменных

**Преимущества:**
- Редактирование промптов без изменения кода
- Версионирование промптов в git
- Возможность A/B тестирования разных промптов

### 3. Обработка ошибок

**Стратегия:** Многоуровневая обработка ошибок с fallback-механизмами

**Уровни:**
1. Валидация входных данных
2. Обработка ошибок GPT API
3. Парсинг и валидация JSON-ответов
4. Fallback-логика для некорректных ответов

### 4. Расширяемость моделей

**Подход:** Абстракция провайдера GPT через единый интерфейс

**Текущая реализация:** OpenAI GPT
**Планируется:** Поддержка Qwen, локальных моделей

### 5. История и ветвление

**Архитектура:** Древовидная структура с поддержкой parent_id

**Возможности:**
- Линейная история (текущая реализация)
- Ветвление решений (планируется)
- Откат к произвольному шагу (планируется)

## Паттерны проектирования

### 1. Strategy Pattern
**Применение:** Выбор провайдера GPT
```python
# Планируется для поддержки разных моделей
class GPTProvider:
    def generate_transformations(self, step: SolutionStep) -> GenerationResult:
        pass

class OpenAIProvider(GPTProvider):
    pass

class QwenProvider(GPTProvider):
    pass
```

### 2. Factory Pattern
**Применение:** Создание движка с нужной моделью
```python
class TransformationEngineFactory:
    @staticmethod
    def create(provider: str, api_key: str) -> TransformationEngine:
        pass
```

### 3. Observer Pattern
**Применение:** Уведомления об изменениях в истории
```python
# Планируется для real-time обновлений в web-интерфейсе
class HistoryObserver:
    def on_step_added(self, step: HistoryStep):
        pass
```

## Конфигурация и переменные окружения

### Каскадная загрузка настроек
1. `.env.local` — локальные переопределения (не в git)
2. `.env` — основной файл настроек (не в git)
3. `.env.example` — пример настроек (в git)
4. Системные переменные окружения

### Ключевые переменные
- `OPENAI_API_KEY` — ключ API OpenAI
- `GPT_MODEL` — модель GPT (по умолчанию: gpt-3.5-turbo)
- `LOG_LEVEL` — уровень логирования

## Производительность и масштабируемость

### Кэширование
**Текущее состояние:** Отсутствует
**Планируется:** Кэширование результатов GPT для повторяющихся запросов

### Асинхронность
**Текущее состояние:** Синхронные запросы к GPT
**Планируется:** Асинхронные запросы для web-интерфейса

### Масштабирование
**Подход:** Stateless архитектура ядра
**Возможности:** Горизонтальное масштабирование через балансировщик нагрузки

## Безопасность

### API ключи
- Хранение в переменных окружения
- Не попадают в git
- Ротация ключей

### Валидация входных данных
- Проверка LaTeX-синтаксиса
- Санитизация пользовательского ввода
- Ограничение размера запросов

## Мониторинг и логирование

### Логирование
- Структурированные логи с контекстом
- Разные уровни для разных компонентов
- Цветной вывод в консоли

### Метрики
**Текущее состояние:** Базовое логирование
**Планируется:** Метрики производительности и использования

---

## Терминология

### Основные понятия

#### Задача (Task)
**Синонимы:** математическая задача, исходная задача, задача пользователя
**Определение:** Исходное математическое выражение, которое пользователь хочет решить
**Примеры:** уравнение, неравенство, система уравнений

#### Состояние задачи (Solution Step)
**Синонимы:** шаг решения, текущее состояние, математическое выражение
**Определение:** Представление задачи на конкретном этапе решения
**В коде:** `SolutionStep.expression`

#### Преобразование (Transformation)
**Синонимы:** математическое преобразование, операция, действие
**Определение:** Допустимая операция, которую можно применить к текущему состоянию
**Компоненты:**
- `description` — человекочитаемое описание
- `expression` — LaTeX-форма преобразования
- `type` — тип преобразования

#### Тип преобразования (Transformation Type)
**Синонимы:** категория преобразования, вид операции
**Определение:** Классификация преобразований по математическому смыслу
**Основные типы:**
- `add` — добавление к обеим частям
- `subtract` — вычитание из обеих частей
- `multiply` — умножение обеих частей
- `divide` — деление обеих частей
- `factor` — разложение на множители
- `expand` — раскрытие скобок
- `collect_terms` — приведение подобных слагаемых
- `substitute` — подстановка
- `expand_cases` — разбор случаев (например, с модулем)
- `simplify` — упрощение выражения
- `custom` — любое другое преобразование

#### История шагов (Solution History)
**Синонимы:** история решения, последовательность шагов, траектория решения
**Определение:** Полная запись всех шагов решения задачи
**Компоненты:**
- `HistoryStep` — информация об одном шаге
- `parent_id` — связь с предыдущим шагом (для ветвления)

#### Шаг истории (History Step)
**Синонимы:** запись в истории, элемент истории
**Определение:** Полная информация об одном этапе решения
**Содержит:**
- Исходное выражение
- Доступные преобразования
- Выбранное преобразование
- Результат применения
- Метаданные

### Интерфейсы

#### CLI (Command Line Interface)
**Синонимы:** командная строка, терминальный интерфейс
**Определение:** Текстовый интерфейс для работы в терминале

#### Telegram Bot
**Синонимы:** телеграм-бот, бот
**Определение:** Интерфейс через Telegram Messenger

#### Web Interface
**Синонимы:** веб-интерфейс, браузерный интерфейс
**Определение:** Интерфейс через веб-браузер

### Технические термины

#### LaTeX
**Синонимы:** математическая разметка, формульная разметка
**Определение:** Система разметки для математических формул

#### GPT API
**Синонимы:** OpenAI API, API модели
**Определение:** Интерфейс для взаимодействия с языковыми моделями

#### Промпт (Prompt)
**Синонимы:** запрос к модели, инструкция для GPT
**Определение:** Текст, отправляемый в GPT для генерации ответа

#### Перемешивание (Shuffling)
**Синонимы:** рандомизация, перемешивание вариантов
**Определение:** Случайное изменение порядка предложенных преобразований

#### Предпоказ (Preview)
**Синонимы:** предварительный просмотр, показ результата
**Определение:** Отображение результата преобразования до его применения

#### Параметризация (Parameterization)
**Синонимы:** параметры преобразования, настраиваемые параметры
**Определение:** Возможность настройки преобразования через параметры

### Состояния и статусы

#### Завершённость решения (Solution Completeness)
**Синонимы:** готовность решения, полнота решения
**Определение:** Степень завершённости решения задачи

#### Валидность (Validity)
**Синонимы:** корректность, правильность
**Определение:** Соответствие математическим правилам

#### Применимость (Applicability)
**Синонимы:** возможность применения, допустимость
**Определение:** Возможность применить преобразование к текущему состоянию

### Архитектурные термины

#### Ядро (Core)
**Синонимы:** движок, основная логика
**Определение:** Центральная логика генерации и применения преобразований

#### Интерфейс (Interface)
**Синонимы:** пользовательский интерфейс, UI
**Определение:** Способ взаимодействия пользователя с системой

#### Модульность (Modularity)
**Синонимы:** разделение ответственности, независимость компонентов
**Определение:** Архитектурный принцип разделения системы на независимые модули

#### Расширяемость (Extensibility)
**Синонимы:** расширяемость, возможность добавления функций
**Определение:** Способность системы к добавлению новых возможностей

---

*Документ обновляется по мере развития проекта и появления новых архитектурных решений.* 