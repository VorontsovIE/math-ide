---
description: 
globs: 
alwaysApply: true
---
{alwaysApply: true, globs: ["**/*"]}

# Архитектура MathIDE

## Обзор архитектуры

MathIDE построена по модульной архитектуре с чётким разделением ответственности между компонентами. Основные принципы:

1. **Разделение ядра и интерфейсов** — логика генерации и применения преобразований отделена от пользовательских интерфейсов
2. **Модульность** — каждый компонент имеет чётко определённую ответственность
3. **Расширяемость** — архитектура позволяет легко добавлять новые интерфейсы и модели
4. **Независимость от конкретных AI-моделей** — ядро может работать с различными провайдерами GPT

## Архитектурные слои

### 1. Ядро (Core)
**Расположение:** `core/`

**Компоненты:**
- `engine.py` — основной движок генерации и применения преобразований
- `history.py` — управление историей шагов решения

**Ответственность:**
- Генерация допустимых математических преобразований через GPT API
- Применение выбранных преобразований
- Проверка завершённости решения
- Управление историей шагов

### 2. Интерфейсы (Interfaces)
**Расположение:** `interfaces/`

**Компоненты:**
- `cli.py` — командная строка
- `telegram_bot.py` — Telegram-бот
- `web.py` — веб-интерфейс (планируется)

**Ответственность:**
- Взаимодействие с пользователем
- Отображение формул в соответствующем формате
- Навигация по истории

### 3. Промпты (Prompts)
**Расположение:** `prompts/`

**Компоненты:**
- `generation.md` — промпт для генерации преобразований
- `apply.md` — промпт для применения преобразований
- `check.md` — промпт для проверки завершённости
- `transformation_types.md` — описание типов преобразований

**Ответственность:**
- Хранение промптов для GPT
- Поддержка подстановки переменных

### 4. Тесты (Tests)
**Расположение:** `tests/`

**Ответственность:**
- Юнит-тесты компонентов
- Интеграционные тесты
- Тестирование взаимодействия с GPT API

## Ключевые архитектурные решения

### 1. Модель данных

#### SolutionStep
```python
@dataclass
class SolutionStep:
    expression: str  # LaTeX-представление текущего состояния
```
**Назначение:** Представляет состояние задачи на любом этапе решения (уравнение, неравенство, система и т.д.)

#### Transformation
```python
@dataclass
class Transformation:
    description: str      # Человекочитаемое описание
    expression: str      # LaTeX-форма преобразования
    type: str           # Тип преобразования
    parameters: Optional[List[TransformationParameter]] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    preview_result: Optional[str] = None  # Предварительный результат применения преобразования
```
**Назначение:** Представляет одно математическое преобразование с метаданными и опциональным предварительным результатом

#### HistoryStep
```python
@dataclass
class HistoryStep:
    id: str
    step_number: int
    expression: str
    available_transformations: List[Dict[str, Any]]
    chosen_transformation: Optional[Dict[str, Any]]
    result_expression: Optional[str]
    timestamp: datetime
    parent_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
```
**Назначение:** Полная информация о шаге для возможности отката и ветвления

#### TransformationParameter
```python
@dataclass
class TransformationParameter:
    name: str
    value: Any
    options: Optional[List[Any]] = None
```
**Назначение:** Параметр преобразования для будущей параметризации операций

#### GenerationResult
```python
@dataclass
class GenerationResult:
    transformations: List[Transformation]
```
**Назначение:** Результат генерации списка возможных преобразований

#### ApplyResult
```python
@dataclass
class ApplyResult:
    result: str
    is_valid: bool
    explanation: str
    errors: Optional[List[str]] = None
```
**Назначение:** Результат применения преобразования с валидацией и объяснением

#### CheckResult
```python
@dataclass
class CheckResult:
    is_solved: bool
    confidence: float
    explanation: str
    solution_type: str
    next_steps: List[str] = field(default_factory=list)
```
**Назначение:** Результат проверки завершённости решения задачи

#### ProgressAnalysisResult
```python
@dataclass
class ProgressAnalysisResult:
    progress_assessment: str  # good, neutral, poor
    confidence: float
    analysis: str
    recommend_rollback: bool
    recommended_step: Optional[int] = None
    rollback_reason: Optional[str] = None
    suggestion_message: Optional[str] = None
```
**Назначение:** Результат анализа прогресса решения с рекомендациями возврата

#### BaseTransformationType
```python
class BaseTransformationType(Enum):
    ADD = "add"
    SUBTRACT = "subtract"
    MULTIPLY = "multiply"
    # ... другие типы
```
**Назначение:** Перечисление базовых типов математических преобразований

### 2. Основные классы системы

#### TransformationEngine
```python
class TransformationEngine:
    def __init__(self, api_key: Optional[str] = None, model: str = "gpt-3.5-turbo", preview_mode: bool = False)
    def generate_transformations(self, step: SolutionStep) -> GenerationResult
    def apply_transformation(self, current_step: SolutionStep, transformation: Transformation) -> ApplyResult
    def check_solution_completeness(self, current_step: SolutionStep, original_task: str) -> CheckResult
    def analyze_progress(self, original_task: str, history_steps: List[Dict], current_step: str, steps_count: int) -> ProgressAnalysisResult
```
**Назначение:** Главный движок системы, отвечающий за генерацию, применение преобразований, проверку завершённости и анализ прогресса решения. Поддерживает режим предпоказа результатов преобразований

#### SolutionHistory
```python
class SolutionHistory:
    def __init__(self, original_task: str)
    def add_step(self, expression: str, available_transformations: List[Dict], ...) -> str
    def get_current_step(self) -> Optional[HistoryStep]
    def export_history(self) -> Dict[str, Any]
    def import_history(self, history_data: Dict[str, Any]) -> None
```
**Назначение:** Управление историей решения с поддержкой экспорта/импорта и навигации

#### PromptManager
```python
class PromptManager:
    def __init__(self, prompts_dir: str = "prompts")
    def load_prompt(self, filename: str) -> str
    def format_prompt(self, prompt: str, **kwargs) -> str
```
**Назначение:** Загрузка и форматирование промптов из файлов с подстановкой переменных

#### MathIDECLI
```python
class MathIDECLI:
    def __init__(self, api_key: Optional[str] = None, model: str = "gpt-3.5-turbo", preview_mode: bool = False)
    def solve_task(self, task: str) -> None
    def display_transformations(self, transformations: List[Transformation]) -> None
    def display_history(self) -> None
```
**Назначение:** Интерфейс командной строки для взаимодействия с пользователем. Поддерживает отображение предварительных результатов преобразований

#### UserState (Telegram Bot)
```python
@dataclass
class UserState:
    current_expression: Optional[str] = None
    history: Optional[SolutionHistory] = None
    available_transformations: List[Transformation] = field(default_factory=list)
    last_activity: datetime = field(default_factory=datetime.now)
```
**Назначение:** Состояние пользователя в Telegram-боте

#### RateLimiter (Telegram Bot)
```python
class RateLimiter:
    def __init__(self, max_requests: int = 10, time_window: int = 60)
    def is_allowed(self, user_id: int) -> bool
    def cleanup_old_requests(self) -> None
```
**Назначение:** Ограничение частоты запросов в Telegram-боте

### 3. Управление промптами

**Решение:** Вынесение промптов в отдельные `.md` файлы с поддержкой подстановки переменных

**Преимущества:**
- Редактирование промптов без изменения кода
- Версионирование промптов в git
- Возможность A/B тестирования разных промптов

### 4. Обработка ошибок

**Стратегия:** Многоуровневая обработка ошибок с fallback-механизмами

**Уровни:**
1. Валидация входных данных
2. Обработка ошибок GPT API
3. Парсинг и валидация JSON-ответов
4. Fallback-логика для некорректных ответов

### 5. Расширяемость моделей

**Подход:** Абстракция провайдера GPT через единый интерфейс

**Текущая реализация:** OpenAI GPT
**Планируется:** Поддержка Qwen, локальных моделей

### 6. История и ветвление

**Архитектура:** Древовидная структура с поддержкой parent_id

**Возможности:**
- Линейная история (текущая реализация)
- Ветвление решений (планируется)
- Откат к произвольному шагу (планируется)

### 7. Режим предпоказа результатов

**Назначение:** Позволяет пользователю видеть не только описание преобразования, но и результат его применения до выбора

**Реализация:**
- Конфигурируемый режим через параметр `preview_mode`
- Использует уже имеющееся поле `expression` из ответа GPT как предварительный результат
- Простое копирование `expression` в `preview_result` при включенном режиме
- Отображение результатов в дополнительной колонке интерфейса

**Преимущества:**
- Более информированный выбор пользователя
- Возможность сравнения результатов разных преобразований
- Ускорение процесса решения за счет предварительной оценки
- Отсутствие дополнительных запросов к GPT API
- Простота реализации

**Особенности:**
- Предварительный результат берется из поля `expression` промпта генерации
- Не требует дополнительных API вызовов
- Эффективное использование уже полученных данных

### 11. Анализ прогресса и рекомендации возврата

**Назначение:** Анализирует прогресс решения и предлагает мягкие рекомендации возврата к прошлым шагам при отклонении от оптимального пути.

**Реализация:**
- Новый промпт `progress_analysis.md` для анализа прогресса решения
- Метод `analyze_progress()` в `TransformationEngine` 
- Автоматический анализ после каждого применения преобразования (при наличии достаточной истории)
- Мягкие рекомендации через интерактивные кнопки в Telegram-боте

**Критерии активации:**
- Минимум 4 шага в истории решения
- Анализ показывает отклонение от оптимального пути
- GPT рекомендует конкретный шаг для возврата

**Особенности:**
- Рекомендации носят мягкий характер - пользователь может игнорировать их
- Указывается конкретный шаг для возврата с обоснованием
- Возможность как принять рекомендацию, так и продолжить текущий путь
- Анализ не проводится слишком часто (только при достаточной истории)

### 8. Применение преобразований к историческим шагам

**Реализация:**
- Callback data кнопок включает step_id для идентификации целевого шага
- Обработчик различает применение к текущему vs историческому шагу
- В сообщениях указывается, к какому выражению было применено преобразование
- История корректно отражает применение к конкретному шагу

### 9. Пользовательские преобразования

**Реализация:**
- Кнопка "✏️ Ввести своё преобразование" в каждой клавиатуре с преобразованиями
- Состояние ожидания пользовательского ввода в UserState
- Валидация и применение пользовательских преобразований через GPT
- Поддержка применения к историческим и текущим шагам

**Особенности:**
- GPT проверяет математическую корректность пользовательского преобразования
- Подробные сообщения об ошибках при некорректных преобразованиях
- Сохранение пользовательских преобразований в истории

### 10. Автоматический показ истории при завершении

**Реализация:**
- Автоматический вызов show_final_history() при решении задачи
- Показ истории предыдущей задачи при начале новой
- Универсальная функция для работы с Update и CallbackQuery

**Особенности:**
- История показывается без интерактивных кнопок (только просмотр)
- Четкое разделение между завершением и началом новой задачи
- Полная трассировка решения от начала до конца

## Паттерны проектирования

### 1. Strategy Pattern
**Применение:** Выбор провайдера GPT
```python
# Планируется для поддержки разных моделей
class GPTProvider:
    def generate_transformations(self, step: SolutionStep) -> GenerationResult:
        pass

class OpenAIProvider(GPTProvider):
    pass

class QwenProvider(GPTProvider):
    pass
```

### 2. Factory Pattern
**Применение:** Создание движка с нужной моделью
```python
class TransformationEngineFactory:
    @staticmethod
    def create(provider: str, api_key: str) -> TransformationEngine:
        pass
```

### 3. Observer Pattern
**Применение:** Уведомления об изменениях в истории
```python
# Планируется для real-time обновлений в web-интерфейсе
class HistoryObserver:
    def on_step_added(self, step: HistoryStep):
        pass
```

### 4. Command Pattern
**Применение:** Каждое преобразование инкапсулирует действие, которое можно выполнить или отменить.

## Конфигурация и переменные окружения

### Каскадная загрузка настроек
1. `.env.local` — локальные переопределения (не в git)
2. `.env` — основной файл настроек (не в git)
3. `.env.example` — пример настроек (в git)
4. Системные переменные окружения

### Ключевые переменные
- `OPENAI_API_KEY` — ключ API OpenAI
- `GPT_MODEL` — модель GPT (по умолчанию: gpt-3.5-turbo)
- `LOG_LEVEL` — уровень логирования

## Производительность и масштабируемость

### Кэширование
**Текущее состояние:** Отсутствует
**Планируется:** Кэширование результатов GPT для повторяющихся запросов

### Асинхронность
**Текущее состояние:** Синхронные запросы к GPT
**Планируется:** Асинхронные запросы для web-интерфейса

### Масштабирование
**Подход:** Stateless архитектура ядра
**Возможности:** Горизонтальное масштабирование через балансировщик нагрузки

## Безопасность

### API ключи
- Хранение в переменных окружения
- Не попадают в git
- Ротация ключей

### Валидация входных данных
- Проверка LaTeX-синтаксиса
- Санитизация пользовательского ввода
- Ограничение размера запросов

## Математическая корректность

### Проблема некорректных преобразований
**Описание:** GPT может генерировать математически некорректные преобразования, нарушающие эквивалентность или содержащие алгебраические ошибки.

**Решение:** Улучшенные промпты с строгими требованиями к математической корректности.

### Система проверки корректности

#### Промпт генерации
**Требования:**
- Строгий запрет на математически некорректные преобразования
- Обязательная проверка эквивалентности подстановкой значений
- Алгоритм проверки корректности для каждого преобразования
- Примеры корректных и некорректных преобразований

**Алгоритм проверки:**
1. Проверка эквивалентности (подстановка x=0, x=1, x=-1)
2. Проверка арифметических операций
3. Проверка области определения
4. Проверка логической обоснованности

#### Промпт применения
**Требования:**
- Сохранение математической эквивалентности
- Проверка всех арифметических операций
- Учёт области определения и ограничений
- Обработка специальных случаев (деление на переменную, возведение в степень)

#### Промпт проверки завершённости
**Требования:**
- Проверка математической правильности текущего состояния
- Выявление типичных ошибок (потеря корней, посторонние корни, ошибки в знаках)
- Требование полноты решения и соответствия исходной задаче
- Математическая верификация результата

### Типичные ошибки, которые предотвращаются

#### В генерации преобразований:
- Нарушение математической эквивалентности
- Алгебраические ошибки в коэффициентах и знаках
- Нарушение области определения
- Противоречие математическим правилам
- Потеря или появление лишних решений

#### В применении преобразований:
- Неправильные арифметические операции
- Игнорирование ограничений области определения
- Некорректное применение математических формул
- Потеря информации о решениях

#### В проверке завершённости:
- Неполное решение (не все корни найдены)
- Математические ошибки в текущем состоянии
- Несоответствие исходной задаче
- Нарушение области определения

### Поле mathematical_verification
**Назначение:** Краткое подтверждение математической корректности в результатах применения и проверки
**Содержание:** Объяснение проверки корректности (например, проверка подстановкой значений)
**Использование:** Логирование и отладка математической корректности

## Мониторинг и логирование

### Логирование
- Структурированные логи с контекстом
- Разные уровни для разных компонентов
- Цветной вывод в консоли

### Метрики
**Текущее состояние:** Базовое логирование
**Планируется:** Метрики производительности и использования

---

## Терминология

### Основные понятия

#### Задача (Task)
**Синонимы:** математическая задача, исходная задача, задача пользователя
**Определение:** Исходное математическое выражение, которое пользователь хочет решить
**Примеры:** уравнение, неравенство, система уравнений

#### Состояние задачи (Solution Step)
**Синонимы:** шаг решения, текущее состояние, математическое выражение
**Определение:** Представление задачи на конкретном этапе решения
**В коде:** `SolutionStep.expression`

#### Преобразование (Transformation)
**Синонимы:** математическое преобразование, операция, действие
**Определение:** Допустимая операция, которую можно применить к текущему состоянию
**Компоненты:**
- `description` — человекочитаемое описание
- `expression` — LaTeX-форма преобразования
- `type` — тип преобразования

#### Тип преобразования (Transformation Type)
**Синонимы:** категория преобразования, вид операции
**Определение:** Классификация преобразований по математическому смыслу
**Основные типы:**
- `add` — добавление к обеим частям
- `subtract` — вычитание из обеих частей
- `multiply` — умножение обеих частей
- `divide` — деление обеих частей
- `factor` — разложение на множители
- `expand` — раскрытие скобок
- `collect_terms` — приведение подобных слагаемых
- `substitute` — подстановка
- `expand_cases` — разбор случаев (например, с модулем)
- `simplify` — упрощение выражения
- `custom` — любое другое преобразование

#### История шагов (Solution History)
**Синонимы:** история решения, последовательность шагов, траектория решения
**Определение:** Полная запись всех шагов решения задачи
**Компоненты:**
- `HistoryStep` — информация об одном шаге
- `parent_id` — связь с предыдущим шагом (для ветвления)

#### Шаг истории (History Step)
**Синонимы:** запись в истории, элемент истории
**Определение:** Полная информация об одном этапе решения
**Содержит:**
- Исходное выражение
- Доступные преобразования
- Выбранное преобразование
- Результат применения
- Метаданные

### Интерфейсы

#### CLI (Command Line Interface)
**Синонимы:** командная строка, терминальный интерфейс
**Определение:** Текстовый интерфейс для работы в терминале

#### Telegram Bot
**Синонимы:** телеграм-бот, бот
**Определение:** Интерфейс через Telegram Messenger

#### Web Interface
**Синонимы:** веб-интерфейс, браузерный интерфейс
**Определение:** Интерфейс через веб-браузер

### Технические термины

#### LaTeX
**Синонимы:** математическая разметка, формульная разметка
**Определение:** Система разметки для математических формул

#### GPT API
**Синонимы:** OpenAI API, API модели
**Определение:** Интерфейс для взаимодействия с языковыми моделями

#### Промпт (Prompt)
**Синонимы:** запрос к модели, инструкция для GPT
**Определение:** Текст, отправляемый в GPT для генерации ответа

#### Перемешивание (Shuffling)
**Синонимы:** рандомизация, перемешивание вариантов
**Определение:** Случайное изменение порядка предложенных преобразований

#### Предпоказ (Preview)
**Синонимы:** предварительный просмотр, показ результата, preview_result
**Определение:** Отображение результата преобразования до его применения. Конфигурируемый режим, позволяющий пользователю видеть к чему приведет каждое из предложенных преобразований

#### Параметризация (Parameterization)
**Синонимы:** параметры преобразования, настраиваемые параметры
**Определение:** Возможность настройки преобразования через параметры

#### Движок (Engine)
**Синонимы:** ядро системы, TransformationEngine
**Определение:** Центральный компонент системы, отвечающий за генерацию и применение преобразований

#### Менеджер промптов (Prompt Manager)
**Синонимы:** управление промптами, PromptManager
**Определение:** Компонент для загрузки и форматирования промптов из файлов

#### Ограничитель запросов (Rate Limiter)
**Синонимы:** лимитер, RateLimiter
**Определение:** Компонент для ограничения частоты запросов пользователей

### Состояния и статусы

#### Завершённость решения (Solution Completeness)
**Синонимы:** готовность решения, полнота решения
**Определение:** Степень завершённости решения задачи

#### Валидность (Validity)
**Синонимы:** корректность, правильность
**Определение:** Соответствие математическим правилам

#### Применимость (Applicability)
**Синонимы:** возможность применения, допустимость
**Определение:** Возможность применить преобразование к текущему состоянию

### Архитектурные термины

#### Ядро (Core)
**Синонимы:** движок, основная логика
**Определение:** Центральная логика генерации и применения преобразований

#### Интерфейс (Interface)
**Синонимы:** пользовательский интерфейс, UI
**Определение:** Способ взаимодействия пользователя с системой

#### Модульность (Modularity)
**Синонимы:** разделение ответственности, независимость компонентов
**Определение:** Архитектурный принцип разделения системы на независимые модули

#### Расширяемость (Extensibility)
**Синонимы:** расширяемость, возможность добавления функций
**Определение:** Способность системы к добавлению новых возможностей

---

*Документ обновляется по мере развития проекта и появления новых архитектурных решений.* 