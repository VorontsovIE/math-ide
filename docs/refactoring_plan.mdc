---
description: 
globs: 
alwaysApply: false
---
# План рефакторинга: Разделение на модули

## Проблемы текущей архитектуры

### 1. Монолитные файлы
- `core/engine.py` — 1003 строки, смешивает множество ответственностей
- `interfaces/telegram_bot.py` — 1357 строк, сложная логика в одном файле
- Нарушение принципа единой ответственности (SRP)
- Сложность тестирования и поддержки

### 2. Смешение обязанностей
- Логика работы с GPT API смешана с бизнес-логикой
- UI-логика смешана с управлением состоянием
- Утилитарные функции разбросаны по разным файлам

## Предлагаемая новая структура

### 1. Разделение core/engine.py

#### Текущий файл → Новые модули:

**core/types.py** — Типы данных и модели
```python
# Все dataclass'ы:
# - Transformation, SolutionStep, GenerationResult
# - ApplyResult, CheckResult, ProgressAnalysisResult
# - VerificationResult, TransformationParameter
# - BaseTransformationType (enum)
```

**core/prompts.py** — Управление промптами
```python
# - PromptManager
# - Функции форматирования промптов
# - Загрузка и кеширование промптов
```

**core/gpt_client.py** — Работа с GPT API
```python
# - Абстракция над OpenAI API
# - Обработка ошибок API
# - Retry-логика, rate limiting
# - Парсинг ответов
```

**core/parsers.py** — Парсинг ответов GPT
```python
# - fix_latex_escapes_in_json()
# - safe_json_parse()
# - Валидация структуры ответов
```

**core/engine.py** — Основная логика (уменьшится до ~300 строк)
```python
# - TransformationEngine (основные методы)
# - Координация между модулями
# - Бизнес-логика высокого уровня
```

### 2. Разделение interfaces/telegram_bot.py

#### Текущий файл → Новые модули:

**interfaces/telegram/state.py** — Управление состоянием
```python
# - UserState
# - Хранилище состояний пользователей
# - Логика переходов между состояниями
```

**interfaces/telegram/rate_limiter.py** — Ограничение запросов
```python
# - RateLimiter
# - Логика throttling'а
# - Метрики использования API
```

**interfaces/telegram/renderers.py** — Рендеринг контента
```python
# - render_latex_to_image()
# - render_transformations_image()
# - fix_latex_expression()
# - Утилиты для работы с изображениями
```

**interfaces/telegram/keyboards.py** — Клавиатуры и UI
```python
# - get_transformations_keyboard()
# - get_verification_keyboard()
# - get_user_transformation_keyboard()
```

**interfaces/telegram/handlers.py** — Обработчики команд
```python
# - handle_task()
# - handle_transformation_choice()
# - handle_verification_choice()
# - Все callback-обработчики
```

**interfaces/telegram/utils.py** — Вспомогательные функции
```python
# - send_status_message()
# - edit_status_message()
# - update_status_with_progress()
# - show_final_history()
```

**interfaces/telegram_bot.py** — Главный модуль бота (уменьшится до ~200 строк)
```python
# - run_bot()
# - Инициализация приложения
# - Регистрация обработчиков
```

### 3. Новые утилитарные модули

**core/validators.py** — Валидация данных
```python
# - Валидация математических выражений
# - Проверка корректности преобразований
# - Схемы валидации для JSON
```

**core/exceptions.py** — Пользовательские исключения
```python
# - GPTError, ParseError, ValidationError
# - Иерархия исключений для разных типов ошибок
```

**utils/math_utils.py** — Математические утилиты
```python
# - Обработка LaTeX
# - Конвертация математических обозначений
# - Валидация математических выражений
```

**utils/logging_utils.py** — Утилиты логирования
```python
# - Настройка логгеров
# - Цветное логирование
# - Структурированные логи
```

## Итоговая структура проекта

```
math-ide/
├── core/
│   ├── __init__.py
│   ├── types.py          # Типы данных (100-150 строк)
│   ├── engine.py         # Основная логика (~300 строк)
│   ├── history.py        # Без изменений (~250 строк)
│   ├── prompts.py        # Управление промптами (~100 строк)
│   ├── gpt_client.py     # GPT API (~200 строк)
│   ├── parsers.py        # Парсинг ответов (~150 строк)
│   ├── validators.py     # Валидация (~100 строк)
│   └── exceptions.py     # Исключения (~50 строк)
├── interfaces/
│   ├── __init__.py
│   ├── __main__.py
│   ├── cli.py            # Без изменений (~240 строк)
│   ├── telegram_bot.py   # Главный модуль бота (~200 строк)
│   └── telegram/
│       ├── __init__.py
│       ├── state.py      # Состояния (~150 строк)
│       ├── rate_limiter.py # Rate limiting (~100 строк)
│       ├── renderers.py  # Рендеринг (~200 строк)
│       ├── keyboards.py  # UI элементы (~100 строк)
│       ├── handlers.py   # Обработчики (~600 строк)
│       └── utils.py      # Утилиты (~200 строк)
├── utils/
│   ├── __init__.py
│   ├── math_utils.py     # Математические утилиты (~100 строк)
│   └── logging_utils.py  # Логирование (~50 строк)
└── ... (остальные папки без изменений)
```

## Преимущества нового разделения

### 1. Принцип единой ответственности
- Каждый модуль отвечает за одну конкретную область
- Легче понимать назначение каждого файла
- Проще вносить изменения

### 2. Улучшенная тестируемость
- Можно тестировать каждый модуль изолированно
- Легче мокать зависимости
- Более точное покрытие тестами

### 3. Лучшая поддерживаемость
- Изменения в одной области не затрагивают другие
- Проще добавлять новые интерфейсы
- Легче отлаживать проблемы

### 4. Переиспользование кода
- Утилитарные модули можно использовать в разных интерфейсах
- Легче выделить общую логику
- Проще добавлять новые модули

## План реализации

### Этап 1: Создание новых модулей с типами
1. Создать `core/types.py` с dataclass'ами
2. Создать `core/exceptions.py` с исключениями
3. Обновить импорты в существующих файлах

### Этап 2: Выделение утилитарных модулей
1. Создать `core/parsers.py` с функциями парсинга
2. Создать `core/prompts.py` с PromptManager
3. Создать `utils/math_utils.py` и `utils/logging_utils.py`

### Этап 3: Создание GPT клиента
1. Создать `core/gpt_client.py` с абстракцией API
2. Рефакторить `core/engine.py` для использования нового клиента

### Этап 4: Разделение Telegram бота
1. Создать структуру `interfaces/telegram/`
2. Постепенно выносить модули из `telegram_bot.py`
3. Обновить основной файл бота

### Этап 5: Финальная проверка
1. Запустить все тесты
2. Проверить работу всех интерфейсов
3. Обновить документацию

## Риски и митигация

### Риск: Поломка существующей функциональности
**Митигация**: Пошаговый рефакторинг с тестированием на каждом этапе

### Риск: Увеличение сложности импортов
**Митигация**: Правильная организация `__init__.py` файлов с реэкспортом

### Риск: Временное увеличение сложности
**Митигация**: Четкий план реализации по этапам

## Следующие шаги

1. **Сначала создать тесты** для существующей функциональности
2. **Начать с типов и исключений** (наименее рискованно)
3. **Постепенно выносить утилиты** 
4. **В последнюю очередь** рефакторить основную логику

Этот рефакторинг значительно улучшит архитектуру проекта и сделает его более поддерживаемым в долгосрочной перспективе.
