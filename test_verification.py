#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã verification —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.engine import TransformationEngine
from core.types import SolutionStep

def test_verification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å verification."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ verification —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫
    engine = TransformationEngine()
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ—Å—á—ë—Ç (recalculate)
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (recalculate):")
    print("–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: 2x + 4 = 10")
    print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –í—ã—á–µ—Å—Ç—å 4 –∏–∑ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π")
    print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 2x = 7 (–æ—à–∏–±–æ—á–Ω—ã–π)")
    
    try:
        result = engine.verify_transformation(
            original_expression="2x + 4 = 10",
            transformation_description="–í—ã—á–µ—Å—Ç—å 4 –∏–∑ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π",
            current_result="2x = 7",
            verification_type="recalculate"
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {result.is_correct}")
        print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.corrected_result}")
        print(f"   –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.verification_explanation}")
        if result.errors_found:
            print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: {result.errors_found}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (verify_user_suggestion)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (verify_user_suggestion):")
    print("–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: x¬≤ - 4 = 0")
    print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: (x-2)(x+2) = 0")
    
    try:
        result = engine.verify_transformation(
            original_expression="x¬≤ - 4 = 0",
            transformation_description="–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            current_result="x¬≤ - 4 = 0",
            verification_type="verify_user_suggestion",
            user_suggested_result="(x-2)(x+2) = 0"
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {result.is_correct}")
        print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.corrected_result}")
        print(f"   –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.verification_explanation}")
        if result.user_result_assessment:
            print(f"   –û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result.user_result_assessment}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (verify_user_transformation)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (verify_user_transformation):")
    print("–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: 3(x + 2) = 12")
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '–Ø —Ä–∞—Å–∫—Ä—ã–ª —Å–∫–æ–±–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª 3x + 6 = 12'")
    
    try:
        result = engine.verify_transformation(
            original_expression="3(x + 2) = 12",
            transformation_description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '–Ø —Ä–∞—Å–∫—Ä—ã–ª —Å–∫–æ–±–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª 3x + 6 = 12'",
            current_result="3x + 6 = 12",
            verification_type="verify_user_transformation"
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {result.is_correct}")
        print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.corrected_result}")
        print(f"   –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.verification_explanation}")
        if result.user_result_assessment:
            print(f"   –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {result.user_result_assessment}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def show_verification_usage():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å verification –≤ –∫–æ–¥–µ."""
    
    print("\nüìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å verification –≤ –∫–æ–¥–µ:")
    print("=" * 50)
    
    print("""
# 1. –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
from core.engine import TransformationEngine

engine = TransformationEngine()

# 2. –ü–µ—Ä–µ—Å—á—ë—Ç (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–æ—á–µ–Ω)
result = engine.verify_transformation(
    original_expression="2x + 4 = 10",
    transformation_description="–í—ã—á–µ—Å—Ç—å 4 –∏–∑ –æ–±–µ–∏—Ö —á–∞—Å—Ç–µ–π",
    current_result="2x = 7",  # –û—à–∏–±–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    verification_type="recalculate"
)

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
result = engine.verify_transformation(
    original_expression="x¬≤ - 4 = 0",
    transformation_description="–§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
    current_result="x¬≤ - 4 = 0",
    verification_type="verify_user_suggestion",
    user_suggested_result="(x-2)(x+2) = 0"
)

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
result = engine.verify_transformation(
    original_expression="3(x + 2) = 12",
    transformation_description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '–Ø —Ä–∞—Å–∫—Ä—ã–ª —Å–∫–æ–±–∫–∏'",
    current_result="3x + 6 = 12",
    verification_type="verify_user_transformation"
)

# 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
print(f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {result.is_correct}")
print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.corrected_result}")
print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.verification_explanation}")
print(f"–û—à–∏–±–∫–∏: {result.errors_found}")
print(f"–ü–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {result.step_by_step_check}")
""")

def show_verification_in_interfaces():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ verification –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö."""
    
    print("\nüéØ –ö–∞–∫ verification –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö:")
    print("=" * 50)
    
    print("""
# –í Telegram –±–æ—Ç–µ (keyboards.py):
def get_verification_keyboard(transformation_id: str, verification_type: str, current_step_id: str):
    # –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏:
    # - "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" / "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ" (–¥–ª—è manual)
    # - "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å" (–¥–ª—è auto)

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö (handlers.py):
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_data:
# - verify_correct_{transformation_id}
# - verify_incorrect_{transformation_id}  
# - verify_auto_{transformation_id}

# –í CLI (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ):
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å:
# 1. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# 2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# 3. –°–æ–æ–±—â–∏—Ç—å –æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
""")

if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è verification —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å GPT")
        show_verification_usage()
        show_verification_in_interfaces()
    else:
        test_verification()
        show_verification_usage()
        show_verification_in_interfaces()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 